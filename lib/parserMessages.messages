program: VAL
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION VAL
##
## Ends in an error in state: 1.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## non_semicolon_stmt -> UNION . IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> UNION . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> UNION . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## stmt_expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE VAL
##
## Ends in an error in state: 2.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE VAL
##
## Ends in an error in state: 3.
##
## list(preceded(CASE,located(union_member))) -> CASE . union_member list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE UNION VAL
##
## Ends in an error in state: 4.
##
## union_member -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE UNION LBRACE VAL
##
## Ends in an error in state: 5.
##
## union_member -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN VAL
##
## Ends in an error in state: 7.
##
## function_definition(located(ident),option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident),option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT VAL
##
## Ends in an error in state: 8.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident),option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 9.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT VAL
##
## Ends in an error in state: 10.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON VAL
##
## Ends in an error in state: 11.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN UNION VAL
##
## Ends in an error in state: 12.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN UNION LBRACE VAL
##
## Ends in an error in state: 13.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 16.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 17.
##
## list(sugared_function_definition(option(code_block))) -> function_definition(located_ident_with_params,option(code_block)) . list(sugared_function_definition(option(code_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params,option(code_block))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 19.
##
## list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) . list(sugared_function_definition(option(code_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),option(code_block))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN TILDE VAL
##
## Ends in an error in state: 21.
##
## expr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> TILDE . IDENT [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN TILDE IDENT UNION
##
## Ends in an error in state: 22.
##
## expr -> TILDE IDENT . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> TILDE IDENT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN STRUCT VAL
##
## Ends in an error in state: 23.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LPAREN VAL
##
## Ends in an error in state: 24.
##
## option(params) -> LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN [ LBRACE ]
## option(params) -> LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 30.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN STRUCT LBRACE UNION
##
## Ends in an error in state: 31.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE VAL VAL
##
## Ends in an error in state: 32.
##
## list(struct_field) -> VAL . IDENT COLON expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE VAL IDENT VAL
##
## Ends in an error in state: 33.
##
## list(struct_field) -> VAL IDENT . COLON expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE VAL IDENT COLON VAL
##
## Ends in an error in state: 34.
##
## list(struct_field) -> VAL IDENT COLON . expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN VAL
##
## Ends in an error in state: 35.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ LPAREN ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ LPAREN ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . INTERFACE LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . IDENT RPAREN [ LBRACE ]
## type_expr -> LPAREN . function_call RPAREN [ LBRACE ]
## type_expr -> LPAREN . INT RPAREN [ LBRACE ]
## type_expr -> LPAREN . TILDE IDENT RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN UNION VAL
##
## Ends in an error in state: 36.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN UNION LBRACE VAL
##
## Ends in an error in state: 37.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 40.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN TILDE VAL
##
## Ends in an error in state: 42.
##
## fexpr -> TILDE . IDENT [ LPAREN ]
## type_expr -> LPAREN TILDE . IDENT RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN TILDE IDENT VAL
##
## Ends in an error in state: 43.
##
## fexpr -> TILDE IDENT . [ LPAREN ]
## type_expr -> LPAREN TILDE IDENT . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN STRUCT VAL
##
## Ends in an error in state: 45.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 46.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN STRUCT LBRACE UNION
##
## Ends in an error in state: 47.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 50.
##
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN INTERFACE VAL
##
## Ends in an error in state: 52.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN INTERFACE LBRACE VAL
##
## Ends in an error in state: 53.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN VAL
##
## Ends in an error in state: 54.
##
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN IDENT VAL
##
## Ends in an error in state: 55.
##
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 56.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 58.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW VAL
##
## Ends in an error in state: 59.
##
## option(preceded(RARROW,located(fexpr))) -> RARROW . fexpr [ VAL SEMICOLON RPAREN RBRACE LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW UNION VAL
##
## Ends in an error in state: 60.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW UNION LBRACE VAL
##
## Ends in an error in state: 61.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW TILDE VAL
##
## Ends in an error in state: 65.
##
## fexpr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW STRUCT VAL
##
## Ends in an error in state: 67.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 68.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW STRUCT LBRACE UNION
##
## Ends in an error in state: 69.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW LPAREN VAL
##
## Ends in an error in state: 73.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW INTERFACE VAL
##
## Ends in an error in state: 74.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW INTERFACE LBRACE VAL
##
## Ends in an error in state: 75.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN IDENT LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 78.
##
## list(located(function_signature_binding)) -> function_definition(located(ident),nothing) . list(located(function_signature_binding)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 349, spurious reduction of production function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW LPAREN IDENT VAL
##
## Ends in an error in state: 81.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN VAL
##
## Ends in an error in state: 82.
##
## function_definition(nothing,nothing) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN LPAREN VAL
##
## Ends in an error in state: 83.
##
## function_definition(nothing,nothing) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 85.
##
## function_definition(nothing,nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN LPAREN RPAREN VAL
##
## Ends in an error in state: 88.
##
## function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW ENUM VAL
##
## Ends in an error in state: 90.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW ENUM LBRACE VAL
##
## Ends in an error in state: 91.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT VAL
##
## Ends in an error in state: 92.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT EQUALS VAL
##
## Ends in an error in state: 93.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN INTERFACE VAL
##
## Ends in an error in state: 94.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN INTERFACE LBRACE VAL
##
## Ends in an error in state: 95.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 97.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN INT UNION
##
## Ends in an error in state: 98.
##
## expr -> INT . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> INT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT UNION
##
## Ends in an error in state: 99.
##
## expr -> IDENT . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN FN VAL
##
## Ends in an error in state: 100.
##
## function_definition(nothing,option(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN FN LPAREN VAL
##
## Ends in an error in state: 101.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## function_definition(nothing,option(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN FN LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 103.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE VAL
##
## Ends in an error in state: 105.
##
## code_block -> LBRACE . block_stmt RBRACE [ VAL UNION TILDE STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE DOT COMMA ]
## code_block -> LBRACE . RBRACE [ VAL UNION TILDE STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TILDE VAL
##
## Ends in an error in state: 106.
##
## expr -> TILDE . IDENT [ DOT ]
## fexpr -> TILDE . IDENT [ LPAREN ]
## stmt_expr -> TILDE . IDENT [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TILDE IDENT VAL
##
## Ends in an error in state: 107.
##
## expr -> TILDE IDENT . [ DOT ]
## fexpr -> TILDE IDENT . [ LPAREN ]
## stmt_expr -> TILDE IDENT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT VAL
##
## Ends in an error in state: 108.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## non_semicolon_stmt -> STRUCT . IDENT LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> STRUCT . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> STRUCT . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## stmt_expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT VAL
##
## Ends in an error in state: 109.
##
## non_semicolon_stmt -> STRUCT IDENT . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> STRUCT IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> STRUCT IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN VAL
##
## Ends in an error in state: 110.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> STRUCT IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 112.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 113.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 118.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 119.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE UNION
##
## Ends in an error in state: 123.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 127.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE UNION
##
## Ends in an error in state: 128.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 131.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN VAL
##
## Ends in an error in state: 132.
##
## semicolon_stmt -> RETURN . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN ENUM VAL
##
## Ends in an error in state: 133.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN ENUM LBRACE VAL
##
## Ends in an error in state: 134.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 138.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 141.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN IDENT RPAREN VAL
##
## Ends in an error in state: 142.
##
## struct_constructor -> type_expr . LBRACE nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## struct_constructor -> type_expr . LBRACE loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE VAL
##
## Ends in an error in state: 143.
##
## struct_constructor -> type_expr LBRACE . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## struct_constructor -> type_expr LBRACE . loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE IDENT VAL
##
## Ends in an error in state: 144.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE IDENT COLON VAL
##
## Ends in an error in state: 145.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 148.
##
## expr -> function_call . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN LPAREN RPAREN RPAREN VAL
##
## Ends in an error in state: 149.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LPAREN VAL
##
## Ends in an error in state: 150.
##
## function_call -> fexpr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## function_call -> fexpr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LPAREN IDENT VAL
##
## Ends in an error in state: 156.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT COMMA ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT DOT VAL
##
## Ends in an error in state: 157.
##
## expr -> expr DOT . IDENT [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT DOT IDENT UNION
##
## Ends in an error in state: 158.
##
## expr -> expr DOT IDENT . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT DOT IDENT LPAREN VAL
##
## Ends in an error in state: 159.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LPAREN IDENT COMMA VAL
##
## Ends in an error in state: 164.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE IDENT COLON IDENT VAL
##
## Ends in an error in state: 167.
##
## expr -> expr . DOT IDENT [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE DOT COMMA ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE IDENT COLON IDENT COMMA VAL
##
## Ends in an error in state: 168.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN IDENT VAL
##
## Ends in an error in state: 176.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> RETURN expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAL
##
## Ends in an error in state: 178.
##
## semicolon_stmt -> LET . IDENT EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT VAL
##
## Ends in an error in state: 179.
##
## semicolon_stmt -> LET IDENT . EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN VAL
##
## Ends in an error in state: 180.
##
## semicolon_stmt -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 182.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS VAL
##
## Ends in an error in state: 183.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 184.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 186.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS VAL
##
## Ends in an error in state: 187.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 188.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS VAL
##
## Ends in an error in state: 189.
##
## semicolon_stmt -> LET IDENT EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT VAL
##
## Ends in an error in state: 190.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE VAL
##
## Ends in an error in state: 191.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## non_semicolon_stmt -> INTERFACE . IDENT LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> INTERFACE . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> INTERFACE . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## stmt_expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE VAL
##
## Ends in an error in state: 192.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## stmt_expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 194.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ DOT ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## stmt_expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT VAL
##
## Ends in an error in state: 195.
##
## non_semicolon_stmt -> INTERFACE IDENT . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> INTERFACE IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> INTERFACE IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN VAL
##
## Ends in an error in state: 196.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> INTERFACE IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 198.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 199.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 203.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 204.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE VAL
##
## Ends in an error in state: 207.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INT VAL
##
## Ends in an error in state: 210.
##
## expr -> INT . [ DOT ]
## fexpr -> INT . [ LPAREN ]
## stmt_expr -> INT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF VAL
##
## Ends in an error in state: 211.
##
## if_ -> IF . LPAREN expr RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF LPAREN VAL
##
## Ends in an error in state: 212.
##
## if_ -> IF LPAREN . expr RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF LPAREN IDENT VAL
##
## Ends in an error in state: 213.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT ]
## if_ -> IF LPAREN expr . RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF LPAREN IDENT RPAREN VAL
##
## Ends in an error in state: 214.
##
## if_ -> IF LPAREN expr RPAREN . code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF LPAREN IDENT RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 215.
##
## if_ -> IF LPAREN expr RPAREN code_block . option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN code_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF LPAREN IDENT RPAREN LBRACE RBRACE ELSE VAL
##
## Ends in an error in state: 216.
##
## else_ -> ELSE . if_ [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## else_ -> ELSE . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT VAL
##
## Ends in an error in state: 221.
##
## expr -> IDENT . [ DOT ]
## fexpr -> IDENT . [ LPAREN ]
## stmt_expr -> IDENT . [ SEMICOLON RBRACE EOF ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN VAL
##
## Ends in an error in state: 222.
##
## function_definition(located(ident),some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located(ident),some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN VAL
##
## Ends in an error in state: 223.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,option(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 225.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 226.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 228.
##
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(code_block) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN VAL
##
## Ends in an error in state: 230.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 231.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 233.
##
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(code_block) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT VAL
##
## Ends in an error in state: 234.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located(ident),some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN VAL
##
## Ends in an error in state: 235.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 237.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN VAL
##
## Ends in an error in state: 238.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 240.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 241.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 244.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 245.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 247.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 250.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN VAL
##
## Ends in an error in state: 251.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 253.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 254.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 257.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 258.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 260.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM VAL
##
## Ends in an error in state: 262.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## stmt_expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE VAL
##
## Ends in an error in state: 263.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 266.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 269.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT VAL
##
## Ends in an error in state: 270.
##
## non_semicolon_stmt -> ENUM IDENT . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN VAL
##
## Ends in an error in state: 271.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 273.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 274.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 282.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 283.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE VAL
##
## Ends in an error in state: 290.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> ENUM IDENT LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 297.
##
## expr -> struct_constructor . [ DOT ]
## stmt_expr -> struct_constructor . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## struct_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT SEMICOLON VAL
##
## Ends in an error in state: 301.
##
## block_stmt -> semicolon_stmt SEMICOLON . block_stmt [ RBRACE EOF ]
## block_stmt -> semicolon_stmt SEMICOLON . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## semicolon_stmt SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE RBRACE VAL
##
## Ends in an error in state: 302.
##
## block_stmt -> non_semicolon_stmt . block_stmt [ RBRACE EOF ]
## stmt -> non_semicolon_stmt . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## non_semicolon_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 307.
##
## expr -> function_call . [ DOT ]
## fexpr -> function_call . [ LPAREN ]
## stmt_expr -> function_call . [ SEMICOLON RBRACE EOF ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT DOT VAL
##
## Ends in an error in state: 309.
##
## expr -> expr DOT . IDENT [ DOT ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT . IDENT [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT DOT IDENT VAL
##
## Ends in an error in state: 310.
##
## expr -> expr DOT IDENT . [ DOT ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT . [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT DOT IDENT LPAREN VAL
##
## Ends in an error in state: 311.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT DOT IDENT LPAREN IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 313.
##
## expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT DOT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 315.
##
## expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE IDENT EOF
##
## Ends in an error in state: 319.
##
## code_block -> LBRACE block_stmt . RBRACE [ VAL UNION TILDE STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 221, spurious reduction of production stmt_expr -> IDENT
## In state 298, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 300, spurious reduction of production stmt -> semicolon_stmt
## In state 299, spurious reduction of production block_stmt -> stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN FN LPAREN RPAREN UNION
##
## Ends in an error in state: 323.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT EQUALS IDENT VAL
##
## Ends in an error in state: 325.
##
## expr -> expr . DOT IDENT [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN DOT COMMA ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT EQUALS IDENT COMMA VAL
##
## Ends in an error in state: 326.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE IDENT COMMA VAL
##
## Ends in an error in state: 329.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 338.
##
## fexpr -> LPAREN struct_constructor . RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN struct_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN FN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 340.
##
## fexpr -> LPAREN function_definition(nothing,nothing) . RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN function_definition(nothing,nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 89, spurious reduction of production function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW LPAREN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 342.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN RPAREN RARROW IDENT UNION
##
## Ends in an error in state: 345.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN EOF DOT COMMA ]
## option(preceded(RARROW,located(fexpr))) -> RARROW fexpr . [ VAL SEMICOLON RPAREN RBRACE LBRACE FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 348.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 351.
##
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN INT VAL
##
## Ends in an error in state: 353.
##
## fexpr -> INT . [ LPAREN ]
## type_expr -> LPAREN INT . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN IDENT VAL
##
## Ends in an error in state: 355.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> LPAREN IDENT . RPAREN [ LBRACE ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN ENUM VAL
##
## Ends in an error in state: 357.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN ENUM LBRACE VAL
##
## Ends in an error in state: 358.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 361.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 365.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 367.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> LPAREN function_call . RPAREN [ LBRACE ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT LBRACE VAL IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 369.
##
## expr -> expr . DOT IDENT [ VAL RBRACE FN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL RBRACE FN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL RBRACE FN DOT ]
## list(struct_field) -> VAL IDENT COLON expr . list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: RETURN STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 373.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON IDENT VAL
##
## Ends in an error in state: 374.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT COMMA ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 99, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN LPAREN IDENT COLON IDENT COMMA VAL
##
## Ends in an error in state: 375.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 379.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN VAL
##
## Ends in an error in state: 380.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 382.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 383.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 386.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 387.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 389.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 392.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN VAL
##
## Ends in an error in state: 393.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 395.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 396.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 399.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 400.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM LBRACE FN IDENT LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 402.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 345, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE STRUCT VAL
##
## Ends in an error in state: 406.
##
## union_member -> STRUCT . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE STRUCT LBRACE UNION
##
## Ends in an error in state: 407.
##
## union_member -> STRUCT LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE INTERFACE VAL
##
## Ends in an error in state: 411.
##
## union_member -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE INTERFACE LBRACE VAL
##
## Ends in an error in state: 412.
##
## union_member -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE IDENT VAL
##
## Ends in an error in state: 415.
##
## union_member -> IDENT . [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE IDENT LPAREN VAL
##
## Ends in an error in state: 416.
##
## union_member -> IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE ENUM VAL
##
## Ends in an error in state: 421.
##
## union_member -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE ENUM LBRACE VAL
##
## Ends in an error in state: 422.
##
## union_member -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE CASE ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 429.
##
## list(preceded(CASE,located(union_member))) -> CASE union_member . list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE union_member
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 433.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT VAL
##
## Ends in an error in state: 434.
##
## non_semicolon_stmt -> UNION IDENT . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> UNION IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> UNION IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN VAL
##
## Ends in an error in state: 435.
##
## non_semicolon_stmt -> UNION IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
## non_semicolon_stmt -> UNION IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 437.
##
## non_semicolon_stmt -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 438.
##
## non_semicolon_stmt -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 443.
##
## non_semicolon_stmt -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 444.
##
## non_semicolon_stmt -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE VAL
##
## Ends in an error in state: 448.
##
## non_semicolon_stmt -> UNION IDENT LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IDENT RBRACE
##
## Ends in an error in state: 454.
##
## program -> block_stmt . EOF [ # ]
##
## The known suffix of the stack is as follows:
## block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 221, spurious reduction of production stmt_expr -> IDENT
## In state 298, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 300, spurious reduction of production stmt -> semicolon_stmt
## In state 299, spurious reduction of production block_stmt -> stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

