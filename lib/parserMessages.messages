program: VAL
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid syntax

program: UNION VAL
##
## Ends in an error in state: 1.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## non_semicolon_stmt -> UNION . IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

program: UNION LBRACE VAL
##
## Ends in an error in state: 2.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

program: UNION LBRACE CASE VAL
##
## Ends in an error in state: 3.
##
## list(preceded(CASE,located(union_member))) -> CASE . union_member list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE
##

Invalid syntax

program: UNION LBRACE CASE UNION VAL
##
## Ends in an error in state: 4.
##
## union_member -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

program: UNION LBRACE CASE UNION LBRACE VAL
##
## Ends in an error in state: 5.
##
## union_member -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

program: ENUM LBRACE FN VAL
##
## Ends in an error in state: 7.
##
## function_definition(located(ident),option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

program: ENUM LBRACE FN IDENT VAL
##
## Ends in an error in state: 8.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 9.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

program: FN LPAREN IDENT VAL
##
## Ends in an error in state: 10.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: FN LPAREN IDENT COLON VAL
##
## Ends in an error in state: 11.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Invalid syntax

program: RETURN UNION VAL
##
## Ends in an error in state: 12.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

program: RETURN UNION LBRACE VAL
##
## Ends in an error in state: 13.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

program: RETURN UNION LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 15.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: RETURN UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 16.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 17.
##
## list(sugared_function_definition(option(code_block))) -> function_definition(located_ident_with_params,option(code_block)) . list(sugared_function_definition(option(code_block))) [ RBRACE IMPL ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params,option(code_block))
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 19.
##
## list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) . list(sugared_function_definition(option(code_block))) [ RBRACE IMPL ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),option(code_block))
##

Invalid syntax

program: RETURN TILDE VAL
##
## Ends in an error in state: 21.
##
## expr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> TILDE . IDENT [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

program: RETURN TILDE IDENT UNION
##
## Ends in an error in state: 22.
##
## expr -> TILDE IDENT . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> TILDE IDENT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

Invalid syntax

program: RETURN STRUCT VAL
##
## Ends in an error in state: 23.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

program: STRUCT LPAREN VAL
##
## Ends in an error in state: 24.
##
## option(params) -> LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN [ LBRACE ]
## option(params) -> LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Invalid syntax

program: RETURN STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 30.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

program: RETURN STRUCT LBRACE UNION
##
## Ends in an error in state: 31.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

program: STRUCT LBRACE VAL VAL
##
## Ends in an error in state: 32.
##
## list(struct_field) -> VAL . IDENT COLON expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL
##

Invalid syntax

program: STRUCT LBRACE VAL IDENT VAL
##
## Ends in an error in state: 33.
##
## list(struct_field) -> VAL IDENT . COLON expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT
##

Invalid syntax

program: STRUCT LBRACE VAL IDENT COLON VAL
##
## Ends in an error in state: 34.
##
## list(struct_field) -> VAL IDENT COLON . expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON
##

Invalid syntax

program: RETURN STRING UNION
##
## Ends in an error in state: 35.
##
## expr -> STRING . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> STRING . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRING
##

Invalid syntax

program: LPAREN VAL
##
## Ends in an error in state: 36.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ LPAREN ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ LPAREN ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . INTERFACE LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . IDENT RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . function_call RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . INT RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . BOOL RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . STRING RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN . TILDE IDENT RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Invalid syntax

program: LPAREN UNION VAL
##
## Ends in an error in state: 37.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION
##

Invalid syntax

program: LPAREN UNION LBRACE VAL
##
## Ends in an error in state: 38.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE
##

Invalid syntax

program: LPAREN UNION LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 40.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: LPAREN UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 41.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: LPAREN TILDE VAL
##
## Ends in an error in state: 43.
##
## fexpr -> TILDE . IDENT [ LPAREN ]
## type_expr -> LPAREN TILDE . IDENT RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE
##

Invalid syntax

program: LPAREN TILDE IDENT VAL
##
## Ends in an error in state: 44.
##
## fexpr -> TILDE IDENT . [ LPAREN ]
## type_expr -> LPAREN TILDE IDENT . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE IDENT
##

Invalid syntax

program: LPAREN STRUCT VAL
##
## Ends in an error in state: 46.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

Invalid syntax

program: LPAREN STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 47.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params)
##

Invalid syntax

program: LPAREN STRUCT LBRACE UNION
##
## Ends in an error in state: 48.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE
##

Invalid syntax

program: STRUCT LBRACE IMPL VAL
##
## Ends in an error in state: 51.
##
## list(impl) -> IMPL . fexpr LBRACE list(sugared_function_definition(option(code_block))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL
##

Invalid syntax

program: STRUCT LBRACE IMPL UNION VAL
##
## Ends in an error in state: 52.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

program: STRUCT LBRACE IMPL UNION LBRACE VAL
##
## Ends in an error in state: 53.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

program: STRUCT LBRACE IMPL UNION LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 55.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: STRUCT LBRACE IMPL TILDE VAL
##
## Ends in an error in state: 57.
##
## fexpr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

program: STRUCT LBRACE IMPL STRUCT VAL
##
## Ends in an error in state: 59.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

program: STRUCT LBRACE IMPL STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 60.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

program: STRUCT LBRACE IMPL STRUCT LBRACE UNION
##
## Ends in an error in state: 61.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

program: STRUCT LBRACE IMPL LPAREN VAL
##
## Ends in an error in state: 67.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Invalid syntax

program: STRUCT LBRACE IMPL INTERFACE VAL
##
## Ends in an error in state: 68.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

program: STRUCT LBRACE IMPL INTERFACE LBRACE VAL
##
## Ends in an error in state: 69.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

program: INTERFACE LBRACE FN VAL
##
## Ends in an error in state: 70.
##
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

program: INTERFACE LBRACE FN IDENT VAL
##
## Ends in an error in state: 71.
##
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

program: INTERFACE LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 72.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

program: INTERFACE LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 74.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: FN LPAREN RPAREN RARROW VAL
##
## Ends in an error in state: 75.
##
## option(preceded(RARROW,located(fexpr))) -> RARROW . fexpr [ VAL SEMICOLON RPAREN RBRACE LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW
##

Invalid syntax

program: STRUCT LBRACE IMPL ENUM VAL
##
## Ends in an error in state: 78.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

program: STRUCT LBRACE IMPL ENUM LBRACE VAL
##
## Ends in an error in state: 79.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

program: ENUM LBRACE IDENT VAL
##
## Ends in an error in state: 80.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: ENUM LBRACE IDENT EQUALS VAL
##
## Ends in an error in state: 81.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

Invalid syntax

program: RETURN INTERFACE VAL
##
## Ends in an error in state: 82.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

program: RETURN INTERFACE LBRACE VAL
##
## Ends in an error in state: 83.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

program: RETURN INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 85.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

program: INTERFACE LBRACE FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 86.
##
## list(located(function_signature_binding)) -> function_definition(located(ident),nothing) . list(located(function_signature_binding)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 358, spurious reduction of production function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

Invalid syntax

program: RETURN INT UNION
##
## Ends in an error in state: 88.
##
## expr -> INT . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> INT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INT
##

Invalid syntax

program: RETURN IDENT UNION
##
## Ends in an error in state: 89.
##
## expr -> IDENT . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: RETURN FN VAL
##
## Ends in an error in state: 90.
##
## function_definition(nothing,option(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

program: RETURN FN LPAREN VAL
##
## Ends in an error in state: 91.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## function_definition(nothing,option(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

program: RETURN FN LPAREN IDENT COLON BOOL COMMA RPAREN UNION
##
## Ends in an error in state: 93.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: LBRACE VAL
##
## Ends in an error in state: 95.
##
## code_block -> LBRACE . block_stmt RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
## code_block -> LBRACE . RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Invalid syntax

program: TILDE VAL
##
## Ends in an error in state: 96.
##
## expr -> TILDE . IDENT [ DOT ]
## fexpr -> TILDE . IDENT [ LPAREN ]
## stmt_expr -> TILDE . IDENT [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

program: TILDE IDENT VAL
##
## Ends in an error in state: 97.
##
## expr -> TILDE IDENT . [ DOT ]
## fexpr -> TILDE IDENT . [ LPAREN ]
## stmt_expr -> TILDE IDENT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

Invalid syntax

program: SWITCH VAL
##
## Ends in an error in state: 98.
##
## switch -> SWITCH . LPAREN expr RPAREN LBRACE list(switch_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

Invalid syntax

program: SWITCH LPAREN VAL
##
## Ends in an error in state: 99.
##
## switch -> SWITCH LPAREN . expr RPAREN LBRACE list(switch_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN
##

Invalid syntax

program: RETURN ENUM VAL
##
## Ends in an error in state: 100.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

program: RETURN ENUM LBRACE VAL
##
## Ends in an error in state: 101.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

program: RETURN ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 104.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: RETURN ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 105.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: RETURN ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 107.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: RETURN ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 108.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: RETURN BOOL UNION
##
## Ends in an error in state: 109.
##
## expr -> BOOL . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> BOOL . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## BOOL
##

Invalid syntax

program: LPAREN BOOL RPAREN IDENT
##
## Ends in an error in state: 110.
##
## struct_constructor -> type_expr . LBRACE nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## struct_constructor -> type_expr . LBRACE loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Invalid syntax

program: IDENT LBRACE VAL
##
## Ends in an error in state: 111.
##
## struct_constructor -> type_expr LBRACE . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## struct_constructor -> type_expr LBRACE . loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr LBRACE
##

Invalid syntax

program: IDENT LBRACE IDENT VAL
##
## Ends in an error in state: 112.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: IDENT LBRACE IDENT COLON VAL
##
## Ends in an error in state: 113.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Invalid syntax

program: RETURN BOOL LPAREN RPAREN UNION
##
## Ends in an error in state: 116.
##
## expr -> function_call . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

program: LPAREN FN LPAREN RPAREN RPAREN VAL
##
## Ends in an error in state: 117.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL IDENT FN EOF DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL IDENT FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr
##

Invalid syntax

program: BOOL LPAREN VAL
##
## Ends in an error in state: 118.
##
## function_call -> fexpr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL IDENT FN EOF DOT COMMA ]
## function_call -> fexpr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL IDENT FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN
##

Invalid syntax

program: BOOL LPAREN BOOL VAL
##
## Ends in an error in state: 124.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT COMMA ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: RETURN BOOL DOT VAL
##
## Ends in an error in state: 125.
##
## expr -> expr DOT . IDENT [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Invalid syntax

program: RETURN BOOL DOT IDENT UNION
##
## Ends in an error in state: 126.
##
## expr -> expr DOT IDENT . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

Invalid syntax

program: RETURN BOOL DOT IDENT LPAREN VAL
##
## Ends in an error in state: 127.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

Invalid syntax

program: BOOL LPAREN BOOL COMMA VAL
##
## Ends in an error in state: 132.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Invalid syntax

program: IDENT LBRACE IDENT COLON BOOL VAL
##
## Ends in an error in state: 135.
##
## expr -> expr . DOT IDENT [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE DOT COMMA ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: IDENT LBRACE IDENT COLON BOOL COMMA VAL
##
## Ends in an error in state: 136.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

Invalid syntax

program: SWITCH LPAREN BOOL VAL
##
## Ends in an error in state: 144.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT ]
## switch -> SWITCH LPAREN expr . RPAREN LBRACE list(switch_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN VAL
##
## Ends in an error in state: 145.
##
## switch -> SWITCH LPAREN expr RPAREN . LBRACE list(switch_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr RPAREN
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE VAL
##
## Ends in an error in state: 146.
##
## switch -> SWITCH LPAREN expr RPAREN LBRACE . list(switch_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr RPAREN LBRACE
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE CASE VAL
##
## Ends in an error in state: 147.
##
## switch_branch -> CASE . type_expr IDENT REARROW code_block [ RBRACE CASE ]
##
## The known suffix of the stack is as follows:
## CASE
##

Invalid syntax

program: STRUCT LBRACE IMPL LPAREN IDENT VAL
##
## Ends in an error in state: 148.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT LBRACE
##
## Ends in an error in state: 150.
##
## switch_branch -> CASE type_expr . IDENT REARROW code_block [ RBRACE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 148, spurious reduction of production type_expr -> IDENT
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT VAL
##
## Ends in an error in state: 151.
##
## switch_branch -> CASE type_expr IDENT . REARROW code_block [ RBRACE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr IDENT
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT REARROW VAL
##
## Ends in an error in state: 152.
##
## switch_branch -> CASE type_expr IDENT REARROW . code_block [ RBRACE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr IDENT REARROW
##

Invalid syntax

program: STRUCT LBRACE IMPL LPAREN BOOL LPAREN RPAREN VAL
##
## Ends in an error in state: 154.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

program: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT REARROW LBRACE RBRACE VAL
##
## Ends in an error in state: 155.
##
## list(switch_branch) -> switch_branch . list(switch_branch) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_branch
##

Invalid syntax

program: STRUCT VAL
##
## Ends in an error in state: 159.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## non_semicolon_stmt -> STRUCT . IDENT LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

program: STRUCT IDENT VAL
##
## Ends in an error in state: 160.
##
## non_semicolon_stmt -> STRUCT IDENT . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

Invalid syntax

program: STRUCT IDENT LPAREN VAL
##
## Ends in an error in state: 161.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN
##

Invalid syntax

program: STRUCT IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 163.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: STRUCT IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 164.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

Invalid syntax

program: STRUCT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 170.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: STRUCT IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 171.
##
## non_semicolon_stmt -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

Invalid syntax

program: STRUCT IDENT LBRACE UNION
##
## Ends in an error in state: 176.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE
##

Invalid syntax

program: STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 181.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## stmt_expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

program: STRUCT LBRACE UNION
##
## Ends in an error in state: 182.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ LPAREN ]
## stmt_expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

program: STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 186.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ DOT ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ LPAREN ]
## stmt_expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE
##

Invalid syntax

program: STRING VAL
##
## Ends in an error in state: 187.
##
## expr -> STRING . [ DOT ]
## fexpr -> STRING . [ LPAREN ]
## stmt_expr -> STRING . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRING
##

Invalid syntax

program: RETURN VAL
##
## Ends in an error in state: 188.
##
## semicolon_stmt -> RETURN . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN
##

Invalid syntax

program: RETURN BOOL VAL
##
## Ends in an error in state: 189.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> RETURN expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: LET VAL
##
## Ends in an error in state: 191.
##
## semicolon_stmt -> LET . IDENT EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

Invalid syntax

program: LET IDENT VAL
##
## Ends in an error in state: 192.
##
## semicolon_stmt -> LET IDENT . EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Invalid syntax

program: LET IDENT LPAREN VAL
##
## Ends in an error in state: 193.
##
## semicolon_stmt -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

Invalid syntax

program: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 195.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN EQUALS VAL
##
## Ends in an error in state: 196.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

Invalid syntax

program: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN EQUALS BOOL VAL
##
## Ends in an error in state: 197.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: LET IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 199.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: LET IDENT LPAREN RPAREN EQUALS VAL
##
## Ends in an error in state: 200.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

Invalid syntax

program: LET IDENT LPAREN RPAREN EQUALS BOOL VAL
##
## Ends in an error in state: 201.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: LET IDENT EQUALS VAL
##
## Ends in an error in state: 202.
##
## semicolon_stmt -> LET IDENT EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

Invalid syntax

program: LET IDENT EQUALS BOOL VAL
##
## Ends in an error in state: 203.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: INTERFACE VAL
##
## Ends in an error in state: 204.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## non_semicolon_stmt -> INTERFACE . IDENT LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

program: INTERFACE LBRACE VAL
##
## Ends in an error in state: 205.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## stmt_expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

program: INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 207.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ DOT ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## stmt_expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

program: INTERFACE IDENT VAL
##
## Ends in an error in state: 208.
##
## non_semicolon_stmt -> INTERFACE IDENT . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

Invalid syntax

program: INTERFACE IDENT LPAREN VAL
##
## Ends in an error in state: 209.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN
##

Invalid syntax

program: INTERFACE IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 211.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: INTERFACE IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 212.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

Invalid syntax

program: INTERFACE IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 216.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: INTERFACE IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 217.
##
## non_semicolon_stmt -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

Invalid syntax

program: INTERFACE IDENT LBRACE VAL
##
## Ends in an error in state: 220.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

Invalid syntax

program: INT VAL
##
## Ends in an error in state: 223.
##
## expr -> INT . [ DOT ]
## fexpr -> INT . [ LPAREN ]
## stmt_expr -> INT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INT
##

Invalid syntax

program: IF VAL
##
## Ends in an error in state: 224.
##
## if_ -> IF . LPAREN expr RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

Invalid syntax

program: IF LPAREN VAL
##
## Ends in an error in state: 225.
##
## if_ -> IF LPAREN . expr RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

Invalid syntax

program: IF LPAREN BOOL VAL
##
## Ends in an error in state: 226.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT ]
## if_ -> IF LPAREN expr . RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: IF LPAREN BOOL RPAREN VAL
##
## Ends in an error in state: 227.
##
## if_ -> IF LPAREN expr RPAREN . code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

Invalid syntax

program: IF LPAREN BOOL RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 228.
##
## if_ -> IF LPAREN expr RPAREN code_block . option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN code_block
##

Invalid syntax

program: IF LPAREN BOOL RPAREN LBRACE RBRACE ELSE VAL
##
## Ends in an error in state: 229.
##
## else_ -> ELSE . if_ [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## else_ -> ELSE . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE
##

Invalid syntax

program: IDENT VAL
##
## Ends in an error in state: 234.
##
## expr -> IDENT . [ DOT ]
## fexpr -> IDENT . [ LPAREN ]
## stmt_expr -> IDENT . [ SEMICOLON RBRACE EOF ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: FN VAL
##
## Ends in an error in state: 235.
##
## function_definition(located(ident),some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,option(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(code_block)) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

program: FN LPAREN VAL
##
## Ends in an error in state: 236.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,option(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(code_block)) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

program: FN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 238.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: FN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 239.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 241.
##
## function_definition(nothing,some(code_block)) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(code_block) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

Invalid syntax

program: FN LPAREN RPAREN VAL
##
## Ends in an error in state: 243.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: FN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 244.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ DOT ]
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 246.
##
## function_definition(nothing,some(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(code_block) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

Invalid syntax

program: FN IDENT VAL
##
## Ends in an error in state: 247.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

program: FN IDENT LPAREN VAL
##
## Ends in an error in state: 248.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 250.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN VAL
##
## Ends in an error in state: 251.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 253.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 254.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 257.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 258.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 260.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 263.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN RPAREN LPAREN VAL
##
## Ends in an error in state: 264.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

Invalid syntax

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 266.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 267.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN IDENT LPAREN RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 270.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 271.
##
## function_definition(located_ident_with_params,some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 273.
##
## function_definition(located(ident),some(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM VAL
##
## Ends in an error in state: 275.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

program: ENUM LBRACE VAL
##
## Ends in an error in state: 276.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ DOT ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## stmt_expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

program: ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 278.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ DOT ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## stmt_expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 279.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 281.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ DOT ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## stmt_expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 282.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: ENUM IDENT VAL
##
## Ends in an error in state: 283.
##
## non_semicolon_stmt -> ENUM IDENT . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

Invalid syntax

program: ENUM IDENT LPAREN VAL
##
## Ends in an error in state: 284.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN
##

Invalid syntax

program: ENUM IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 286.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: ENUM IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 287.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

Invalid syntax

program: ENUM IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 289.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 292.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 295.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: ENUM IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 296.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

Invalid syntax

program: ENUM IDENT LPAREN RPAREN LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 298.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM IDENT LPAREN RPAREN LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 301.
##
## non_semicolon_stmt -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM IDENT LBRACE VAL
##
## Ends in an error in state: 303.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE
##

Invalid syntax

program: ENUM IDENT LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 305.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 308.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: BOOL VAL
##
## Ends in an error in state: 310.
##
## expr -> BOOL . [ DOT ]
## fexpr -> BOOL . [ LPAREN ]
## stmt_expr -> BOOL . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## BOOL
##

Invalid syntax

program: IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 312.
##
## expr -> struct_constructor . [ DOT ]
## stmt_expr -> struct_constructor . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## struct_constructor
##

Invalid syntax

program: BOOL SEMICOLON VAL
##
## Ends in an error in state: 316.
##
## block_stmt -> semicolon_stmt SEMICOLON . block_stmt [ RBRACE EOF ]
## block_stmt -> semicolon_stmt SEMICOLON . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## semicolon_stmt SEMICOLON
##

Invalid syntax

program: LBRACE RBRACE VAL
##
## Ends in an error in state: 317.
##
## block_stmt -> non_semicolon_stmt . block_stmt [ RBRACE EOF ]
## stmt -> non_semicolon_stmt . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## non_semicolon_stmt
##

Invalid syntax

program: BOOL LPAREN RPAREN VAL
##
## Ends in an error in state: 322.
##
## expr -> function_call . [ DOT ]
## fexpr -> function_call . [ LPAREN ]
## stmt_expr -> function_call . [ SEMICOLON RBRACE EOF ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

program: BOOL DOT VAL
##
## Ends in an error in state: 324.
##
## expr -> expr DOT . IDENT [ DOT ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT . IDENT [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Invalid syntax

program: BOOL DOT IDENT VAL
##
## Ends in an error in state: 325.
##
## expr -> expr DOT IDENT . [ DOT ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT . [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

Invalid syntax

program: BOOL DOT IDENT LPAREN VAL
##
## Ends in an error in state: 326.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

Invalid syntax

program: BOOL DOT IDENT LPAREN BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 328.
##
## expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN
##

Invalid syntax

program: BOOL DOT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 330.
##
## expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN
##

Invalid syntax

program: LBRACE BOOL EOF
##
## Ends in an error in state: 334.
##
## code_block -> LBRACE block_stmt . RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
##
## The known suffix of the stack is as follows:
## LBRACE block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 310, spurious reduction of production stmt_expr -> BOOL
## In state 313, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 315, spurious reduction of production stmt -> semicolon_stmt
## In state 314, spurious reduction of production block_stmt -> stmt
##

Invalid syntax

program: RETURN FN LPAREN RPAREN UNION
##
## Ends in an error in state: 338.
##
## function_definition(nothing,option(code_block)) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: ENUM LBRACE IDENT EQUALS BOOL VAL
##
## Ends in an error in state: 340.
##
## expr -> expr . DOT IDENT [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN DOT COMMA ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: ENUM LBRACE IDENT EQUALS BOOL COMMA VAL
##
## Ends in an error in state: 341.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

Invalid syntax

program: ENUM LBRACE IDENT COMMA VAL
##
## Ends in an error in state: 344.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Invalid syntax

program: STRUCT LBRACE IMPL ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 348.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: STRUCT LBRACE IMPL ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 351.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: FN LPAREN RPAREN RARROW BOOL UNION
##
## Ends in an error in state: 354.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
## option(preceded(RARROW,located(fexpr))) -> RARROW fexpr . [ VAL SEMICOLON RPAREN RBRACE LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW fexpr
##

Invalid syntax

program: INTERFACE LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 357.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: LPAREN FN VAL
##
## Ends in an error in state: 361.
##
## function_definition(nothing,nothing) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

program: LPAREN FN LPAREN VAL
##
## Ends in an error in state: 362.
##
## function_definition(nothing,nothing) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

program: LPAREN FN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 364.
##
## function_definition(nothing,nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: LPAREN FN LPAREN RPAREN VAL
##
## Ends in an error in state: 367.
##
## function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: LPAREN IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 369.
##
## fexpr -> LPAREN struct_constructor . RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN struct_constructor
##

Invalid syntax

program: LPAREN FN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 371.
##
## fexpr -> LPAREN function_definition(nothing,nothing) . RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE IMPL FN EOF DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN function_definition(nothing,nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 368, spurious reduction of production function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

Invalid syntax

program: STRUCT LBRACE IMPL BOOL VAL
##
## Ends in an error in state: 373.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACE ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACE ]
## list(impl) -> IMPL fexpr . LBRACE list(sugared_function_definition(option(code_block))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr
##

Invalid syntax

program: STRUCT LBRACE IMPL BOOL LBRACE VAL
##
## Ends in an error in state: 374.
##
## list(impl) -> IMPL fexpr LBRACE . list(sugared_function_definition(option(code_block))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE
##

Invalid syntax

program: STRUCT LBRACE IMPL BOOL LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 375.
##
## list(impl) -> IMPL fexpr LBRACE list(sugared_function_definition(option(code_block))) . RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: STRUCT LBRACE IMPL BOOL LBRACE RBRACE VAL
##
## Ends in an error in state: 376.
##
## list(impl) -> IMPL fexpr LBRACE list(sugared_function_definition(option(code_block))) RBRACE . list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: LPAREN STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 379.
##
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE
##

Invalid syntax

program: LPAREN STRING VAL
##
## Ends in an error in state: 381.
##
## fexpr -> STRING . [ LPAREN ]
## type_expr -> LPAREN STRING . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN STRING
##

Invalid syntax

program: LPAREN INTERFACE VAL
##
## Ends in an error in state: 383.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE
##

Invalid syntax

program: LPAREN INTERFACE LBRACE VAL
##
## Ends in an error in state: 384.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE
##

Invalid syntax

program: LPAREN INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 386.
##
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

program: LPAREN INT VAL
##
## Ends in an error in state: 388.
##
## fexpr -> INT . [ LPAREN ]
## type_expr -> LPAREN INT . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN INT
##

Invalid syntax

program: LPAREN IDENT VAL
##
## Ends in an error in state: 390.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> LPAREN IDENT . RPAREN [ LBRACE IDENT ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN IDENT
##

Invalid syntax

program: LPAREN ENUM VAL
##
## Ends in an error in state: 392.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM
##

Invalid syntax

program: LPAREN ENUM LBRACE VAL
##
## Ends in an error in state: 393.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
## type_expr -> LPAREN ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE
##

Invalid syntax

program: LPAREN ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 395.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: LPAREN ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 396.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: LPAREN ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 399.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: LPAREN ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 400.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: LPAREN BOOL VAL
##
## Ends in an error in state: 402.
##
## fexpr -> BOOL . [ LPAREN ]
## type_expr -> LPAREN BOOL . RPAREN [ LBRACE IDENT ]
##
## The known suffix of the stack is as follows:
## LPAREN BOOL
##

Invalid syntax

program: LPAREN BOOL LPAREN RPAREN VAL
##
## Ends in an error in state: 404.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> LPAREN function_call . RPAREN [ LBRACE IDENT ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_call
##

Invalid syntax

program: STRUCT LBRACE VAL IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 406.
##
## expr -> expr . DOT IDENT [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## list(struct_field) -> VAL IDENT COLON expr . option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: STRUCT LBRACE VAL IDENT COLON BOOL SEMICOLON UNION
##
## Ends in an error in state: 408.
##
## list(struct_field) -> VAL IDENT COLON expr option(SEMICOLON) . list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr option(SEMICOLON)
##

Invalid syntax

program: RETURN STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 413.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ VAL SEMICOLON RPAREN RBRACE IMPL FN EOF DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE
##

Invalid syntax

program: FN LPAREN IDENT COLON BOOL VAL
##
## Ends in an error in state: 414.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT COMMA ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production expr -> BOOL
##

Invalid syntax

program: FN LPAREN IDENT COLON BOOL COMMA VAL
##
## Ends in an error in state: 415.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 419.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN VAL
##
## Ends in an error in state: 420.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 422.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 423.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 426.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 427.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 429.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 432.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN VAL
##
## Ends in an error in state: 433.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 435.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 436.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 439.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 440.
##
## function_definition(located_ident_with_params,option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: ENUM LBRACE FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 442.
##
## function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 354, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

program: UNION LBRACE CASE UNION LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 444.
##
## union_member -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION LBRACE CASE STRUCT VAL
##
## Ends in an error in state: 446.
##
## union_member -> STRUCT . LBRACE list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

program: UNION LBRACE CASE STRUCT LBRACE UNION
##
## Ends in an error in state: 447.
##
## union_member -> STRUCT LBRACE . list(struct_field) list(sugared_function_definition(option(code_block))) list(impl) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT LBRACE
##

Invalid syntax

program: UNION LBRACE CASE INTERFACE VAL
##
## Ends in an error in state: 452.
##
## union_member -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

program: UNION LBRACE CASE INTERFACE LBRACE VAL
##
## Ends in an error in state: 453.
##
## union_member -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

program: UNION LBRACE CASE IDENT VAL
##
## Ends in an error in state: 456.
##
## union_member -> IDENT . [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

program: UNION LBRACE CASE IDENT LPAREN VAL
##
## Ends in an error in state: 457.
##
## union_member -> IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

Invalid syntax

program: UNION LBRACE CASE ENUM VAL
##
## Ends in an error in state: 462.
##
## union_member -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

program: UNION LBRACE CASE ENUM LBRACE VAL
##
## Ends in an error in state: 463.
##
## union_member -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

program: UNION LBRACE CASE ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 465.
##
## union_member -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block))) . RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION LBRACE CASE ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 468.
##
## union_member -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block))) . RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION LBRACE CASE ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 470.
##
## list(preceded(CASE,located(union_member))) -> CASE union_member . list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE union_member
##

Invalid syntax

program: UNION LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 473.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ DOT ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ LPAREN ]
## stmt_expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 474.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ DOT ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ LPAREN ]
## stmt_expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE
##

Invalid syntax

program: UNION IDENT VAL
##
## Ends in an error in state: 475.
##
## non_semicolon_stmt -> UNION IDENT . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT
##

Invalid syntax

program: UNION IDENT LPAREN VAL
##
## Ends in an error in state: 476.
##
## non_semicolon_stmt -> UNION IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN
##

Invalid syntax

program: UNION IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 478.
##
## non_semicolon_stmt -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

program: UNION IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 479.
##
## non_semicolon_stmt -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

Invalid syntax

program: UNION IDENT LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 481.
##
## non_semicolon_stmt -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 484.
##
## non_semicolon_stmt -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

program: UNION IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 485.
##
## non_semicolon_stmt -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

Invalid syntax

program: UNION IDENT LPAREN RPAREN LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 487.
##
## non_semicolon_stmt -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: UNION IDENT LBRACE VAL
##
## Ends in an error in state: 489.
##
## non_semicolon_stmt -> UNION IDENT LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE
##

Invalid syntax

program: UNION IDENT LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 491.
##
## non_semicolon_stmt -> UNION IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition(option(code_block)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 432, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 442, spurious reduction of production option(code_block) ->
## In state 443, spurious reduction of production function_definition(located(ident),option(code_block)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
## In state 19, spurious reduction of production list(sugared_function_definition(option(code_block))) ->
## In state 20, spurious reduction of production list(sugared_function_definition(option(code_block))) -> function_definition(located(ident),option(code_block)) list(sugared_function_definition(option(code_block)))
##

Invalid syntax

program: BOOL RBRACE
##
## Ends in an error in state: 495.
##
## program -> block_stmt . EOF [ # ]
##
## The known suffix of the stack is as follows:
## block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 310, spurious reduction of production stmt_expr -> BOOL
## In state 313, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 315, spurious reduction of production stmt -> semicolon_stmt
## In state 314, spurious reduction of production block_stmt -> stmt
##

Invalid syntax

