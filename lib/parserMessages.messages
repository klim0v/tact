program: VAL
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION VAL
##
## Ends in an error in state: 1.
##
## list(top_level_stmt) -> UNION . IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT VAL
##
## Ends in an error in state: 2.
##
## list(top_level_stmt) -> UNION IDENT . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN VAL
##
## Ends in an error in state: 3.
##
## list(top_level_stmt) -> UNION IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT VAL
##
## Ends in an error in state: 4.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON VAL
##
## Ends in an error in state: 5.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION VAL
##
## Ends in an error in state: 6.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION LBRACE VAL
##
## Ends in an error in state: 7.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE VAL
##
## Ends in an error in state: 8.
##
## list(preceded(CASE,located(union_member))) -> CASE . union_member list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE UNION VAL
##
## Ends in an error in state: 9.
##
## union_member -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE UNION LBRACE VAL
##
## Ends in an error in state: 10.
##
## union_member -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN VAL
##
## Ends in an error in state: 12.
##
## function_definition(located(ident)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT VAL
##
## Ends in an error in state: 13.
##
## function_definition(located(ident)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN VAL
##
## Ends in an error in state: 14.
##
## function_definition(located(ident)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 17.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW VAL
##
## Ends in an error in state: 18.
##
## option(preceded(RARROW,located(fexpr))) -> RARROW . fexpr [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW UNION VAL
##
## Ends in an error in state: 19.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW UNION LBRACE VAL
##
## Ends in an error in state: 20.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN UNION
##
## Ends in an error in state: 24.
##
## list(sugared_function_definition) -> function_definition(located_ident_with_params) . list(sugared_function_definition) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 247, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 248, spurious reduction of production option(code_block) ->
## In state 249, spurious reduction of production function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 26.
##
## list(sugared_function_definition) -> function_definition(located(ident)) . list(sugared_function_definition) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 240, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 181, spurious reduction of production option(code_block) ->
## In state 182, spurious reduction of production function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW TILDE VAL
##
## Ends in an error in state: 28.
##
## fexpr -> TILDE . IDENT [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT VAL
##
## Ends in an error in state: 30.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LPAREN VAL
##
## Ends in an error in state: 31.
##
## option(params) -> LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN [ LBRACE ]
## option(params) -> LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 36.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT LBRACE UNION
##
## Ends in an error in state: 37.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE VAL VAL
##
## Ends in an error in state: 38.
##
## list(struct_field) -> VAL . IDENT COLON expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE VAL IDENT VAL
##
## Ends in an error in state: 39.
##
## list(struct_field) -> VAL IDENT . COLON expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE VAL IDENT COLON VAL
##
## Ends in an error in state: 40.
##
## list(struct_field) -> VAL IDENT COLON . expr list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS TILDE VAL
##
## Ends in an error in state: 41.
##
## expr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> TILDE . IDENT [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS TILDE IDENT UNION
##
## Ends in an error in state: 42.
##
## expr -> TILDE IDENT . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> TILDE IDENT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT VAL
##
## Ends in an error in state: 43.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 44.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LBRACE UNION
##
## Ends in an error in state: 45.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 48.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN VAL
##
## Ends in an error in state: 49.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ LPAREN ]
## fexpr -> LPAREN . function_definition(nothing) RPAREN [ LPAREN ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . INTERFACE LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . IDENT RPAREN [ LBRACE ]
## type_expr -> LPAREN . function_call RPAREN [ LBRACE ]
## type_expr -> LPAREN . INT RPAREN [ LBRACE ]
## type_expr -> LPAREN . TILDE IDENT RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION VAL
##
## Ends in an error in state: 50.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION LBRACE VAL
##
## Ends in an error in state: 51.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 54.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN TILDE VAL
##
## Ends in an error in state: 56.
##
## fexpr -> TILDE . IDENT [ LPAREN ]
## type_expr -> LPAREN TILDE . IDENT RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN TILDE IDENT VAL
##
## Ends in an error in state: 57.
##
## fexpr -> TILDE IDENT . [ LPAREN ]
## type_expr -> LPAREN TILDE IDENT . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT VAL
##
## Ends in an error in state: 59.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LPAREN RPAREN VAL
##
## Ends in an error in state: 60.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LBRACE UNION
##
## Ends in an error in state: 61.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 64.
##
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE VAL
##
## Ends in an error in state: 66.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE LBRACE VAL
##
## Ends in an error in state: 67.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN VAL
##
## Ends in an error in state: 68.
##
## function_definition(located(ident)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT VAL
##
## Ends in an error in state: 69.
##
## function_definition(located(ident)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 70.
##
## function_definition(located(ident)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 72.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 73.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 74.
##
## code_block -> LBRACE . block_stmt RBRACE [ VAL UNION TILDE STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE DOT COMMA ]
## code_block -> LBRACE . RBRACE [ VAL UNION TILDE STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE RETURN VAL
##
## Ends in an error in state: 75.
##
## semicolon_stmt -> RETURN . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE VAL
##
## Ends in an error in state: 76.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE LBRACE VAL
##
## Ends in an error in state: 77.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 79.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 80.
##
## list(located(function_signature_binding)) -> function_definition(located(ident)) . list(located(function_signature_binding)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INT UNION
##
## Ends in an error in state: 82.
##
## expr -> INT . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> INT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT UNION
##
## Ends in an error in state: 83.
##
## expr -> IDENT . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN VAL
##
## Ends in an error in state: 84.
##
## function_definition(nothing) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## function_definition(nothing) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN VAL
##
## Ends in an error in state: 85.
##
## function_definition(nothing) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## function_definition(nothing) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 87.
##
## function_definition(nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT UNION
##
## Ends in an error in state: 88.
##
## function_definition(nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN RPAREN UNION
##
## Ends in an error in state: 92.
##
## function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN RPAREN RARROW IDENT UNION
##
## Ends in an error in state: 93.
##
## function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM VAL
##
## Ends in an error in state: 95.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE VAL
##
## Ends in an error in state: 96.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT VAL
##
## Ends in an error in state: 97.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS VAL
##
## Ends in an error in state: 98.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT RPAREN VAL
##
## Ends in an error in state: 99.
##
## struct_constructor -> type_expr . LBRACE nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## struct_constructor -> type_expr . LBRACE loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE VAL
##
## Ends in an error in state: 100.
##
## struct_constructor -> type_expr LBRACE . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## struct_constructor -> type_expr LBRACE . loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT VAL
##
## Ends in an error in state: 101.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON VAL
##
## Ends in an error in state: 102.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 105.
##
## expr -> function_call . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN INT VAL
##
## Ends in an error in state: 106.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACE LPAREN LBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN VAL
##
## Ends in an error in state: 107.
##
## function_call -> fexpr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## function_call -> fexpr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN IDENT VAL
##
## Ends in an error in state: 113.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT DOT VAL
##
## Ends in an error in state: 114.
##
## expr -> expr DOT . IDENT [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN IDENT COMMA VAL
##
## Ends in an error in state: 116.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON IDENT VAL
##
## Ends in an error in state: 119.
##
## expr -> expr . DOT IDENT [ RBRACE DOT COMMA ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON IDENT COMMA VAL
##
## Ends in an error in state: 120.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS IDENT VAL
##
## Ends in an error in state: 128.
##
## expr -> expr . DOT IDENT [ RBRACE FN DOT COMMA ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS IDENT COMMA VAL
##
## Ends in an error in state: 129.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT COMMA VAL
##
## Ends in an error in state: 132.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 138.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 141.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE RETURN IDENT VAL
##
## Ends in an error in state: 142.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE DOT ]
## semicolon_stmt -> RETURN expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET VAL
##
## Ends in an error in state: 144.
##
## semicolon_stmt -> LET . IDENT EQUALS expr [ SEMICOLON RBRACE ]
## semicolon_stmt -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
## semicolon_stmt -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT VAL
##
## Ends in an error in state: 145.
##
## semicolon_stmt -> LET IDENT . EQUALS expr [ SEMICOLON RBRACE ]
## semicolon_stmt -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
## semicolon_stmt -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN VAL
##
## Ends in an error in state: 146.
##
## semicolon_stmt -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
## semicolon_stmt -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 148.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS VAL
##
## Ends in an error in state: 149.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 150.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE DOT ]
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 152.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN EQUALS VAL
##
## Ends in an error in state: 153.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 154.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE DOT ]
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT EQUALS VAL
##
## Ends in an error in state: 155.
##
## semicolon_stmt -> LET IDENT EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT EQUALS IDENT VAL
##
## Ends in an error in state: 156.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE DOT ]
## semicolon_stmt -> LET IDENT EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF VAL
##
## Ends in an error in state: 157.
##
## if_ -> IF . LPAREN expr RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN VAL
##
## Ends in an error in state: 158.
##
## if_ -> IF LPAREN . expr RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT VAL
##
## Ends in an error in state: 159.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## if_ -> IF LPAREN expr . RPAREN code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN VAL
##
## Ends in an error in state: 160.
##
## if_ -> IF LPAREN expr RPAREN . code_block option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 161.
##
## if_ -> IF LPAREN expr RPAREN code_block . option(located(else_)) [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN code_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN LBRACE RBRACE ELSE VAL
##
## Ends in an error in state: 162.
##
## else_ -> ELSE . if_ [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## else_ -> ELSE . code_block [ UNION TILDE STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IDENT SEMICOLON VAL
##
## Ends in an error in state: 169.
##
## block_stmt -> semicolon_stmt SEMICOLON . block_stmt [ RBRACE ]
## block_stmt -> semicolon_stmt SEMICOLON . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## semicolon_stmt SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LBRACE RBRACE VAL
##
## Ends in an error in state: 170.
##
## block_stmt -> non_semicolon_stmt . block_stmt [ RBRACE ]
## stmt -> non_semicolon_stmt . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## non_semicolon_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IDENT VAL
##
## Ends in an error in state: 172.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE DOT ]
## semicolon_stmt -> expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 180.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 181.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 184.
##
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INT VAL
##
## Ends in an error in state: 186.
##
## fexpr -> INT . [ LPAREN ]
## type_expr -> LPAREN INT . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT VAL
##
## Ends in an error in state: 188.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> LPAREN IDENT . RPAREN [ LBRACE ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM VAL
##
## Ends in an error in state: 190.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE VAL
##
## Ends in an error in state: 191.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 194.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 198.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 200.
##
## fexpr -> LPAREN struct_constructor . RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN struct_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN FN LPAREN RPAREN VAL
##
## Ends in an error in state: 202.
##
## fexpr -> LPAREN function_definition(nothing) . RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN function_definition(nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 93, spurious reduction of production option(code_block) ->
## In state 94, spurious reduction of production function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 204.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> LPAREN function_call . RPAREN [ LBRACE ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE VAL IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 206.
##
## expr -> expr . DOT IDENT [ VAL RBRACE FN DOT ]
## list(struct_field) -> VAL IDENT COLON expr . list(struct_field) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN VAL
##
## Ends in an error in state: 211.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## fexpr -> LPAREN . function_definition(nothing) RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW INTERFACE VAL
##
## Ends in an error in state: 212.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW INTERFACE LBRACE VAL
##
## Ends in an error in state: 213.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN IDENT VAL
##
## Ends in an error in state: 217.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW ENUM VAL
##
## Ends in an error in state: 218.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW ENUM LBRACE VAL
##
## Ends in an error in state: 219.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 226.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW IDENT TILDE
##
## Ends in an error in state: 229.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
## option(preceded(RARROW,located(fexpr))) -> RARROW fexpr . [ VAL UNION STRUCT SEMICOLON RPAREN RBRACE LET LBRACE INTERFACE FN EOF ENUM DOT COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN VAL
##
## Ends in an error in state: 230.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 232.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 233.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 236.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 237.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 240.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN VAL
##
## Ends in an error in state: 241.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 243.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 244.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN VAL
##
## Ends in an error in state: 247.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW IDENT VAL
##
## Ends in an error in state: 248.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 229, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE STRUCT VAL
##
## Ends in an error in state: 252.
##
## union_member -> STRUCT . LBRACE list(struct_field) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE STRUCT LBRACE UNION
##
## Ends in an error in state: 253.
##
## union_member -> STRUCT LBRACE . list(struct_field) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE INTERFACE VAL
##
## Ends in an error in state: 257.
##
## union_member -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE INTERFACE LBRACE VAL
##
## Ends in an error in state: 258.
##
## union_member -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE IDENT VAL
##
## Ends in an error in state: 261.
##
## union_member -> IDENT . [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE IDENT LPAREN VAL
##
## Ends in an error in state: 262.
##
## union_member -> IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN CASE ]
## union_member -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE ENUM VAL
##
## Ends in an error in state: 267.
##
## union_member -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE ENUM LBRACE VAL
##
## Ends in an error in state: 268.
##
## union_member -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
## union_member -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ RBRACE FN CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE CASE ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 275.
##
## list(preceded(CASE,located(union_member))) -> CASE union_member . list(preceded(CASE,located(union_member))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## CASE union_member
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 279.
##
## expr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . [ VAL SEMICOLON RPAREN RBRACE FN DOT COMMA ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT VAL
##
## Ends in an error in state: 280.
##
## expr -> expr . DOT IDENT [ RPAREN DOT COMMA ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA VAL
##
## Ends in an error in state: 281.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 285.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 286.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 289.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT VAL
##
## Ends in an error in state: 290.
##
## list(top_level_stmt) -> STRUCT . IDENT LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT VAL
##
## Ends in an error in state: 291.
##
## list(top_level_stmt) -> STRUCT IDENT . LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN VAL
##
## Ends in an error in state: 292.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 294.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 295.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 298.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAL
##
## Ends in an error in state: 299.
##
## list(top_level_stmt) -> LET . IDENT EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT VAL
##
## Ends in an error in state: 300.
##
## list(top_level_stmt) -> LET IDENT . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN VAL
##
## Ends in an error in state: 301.
##
## list(top_level_stmt) -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 303.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS VAL
##
## Ends in an error in state: 304.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 305.
##
## expr -> expr . DOT IDENT [ SEMICOLON DOT ]
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT SEMICOLON VAL
##
## Ends in an error in state: 306.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE VAL
##
## Ends in an error in state: 307.
##
## list(top_level_stmt) -> INTERFACE . IDENT LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT VAL
##
## Ends in an error in state: 308.
##
## list(top_level_stmt) -> INTERFACE IDENT . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN VAL
##
## Ends in an error in state: 309.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 311.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 312.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 314.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM VAL
##
## Ends in an error in state: 315.
##
## list(top_level_stmt) -> ENUM . IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT VAL
##
## Ends in an error in state: 316.
##
## list(top_level_stmt) -> ENUM IDENT . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN VAL
##
## Ends in an error in state: 317.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN VAL
##
## Ends in an error in state: 319.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE VAL
##
## Ends in an error in state: 320.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 323.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RBRACE
##
## Ends in an error in state: 325.
##
## list(top_level_stmt) -> function_definition(located_ident_with_params) . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 247, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 248, spurious reduction of production option(code_block) ->
## In state 249, spurious reduction of production function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RBRACE
##
## Ends in an error in state: 327.
##
## list(top_level_stmt) -> function_definition(located(ident)) . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 240, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 181, spurious reduction of production option(code_block) ->
## In state 182, spurious reduction of production function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 331.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 334.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 335.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 338.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 342.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE VAL
##
## Ends in an error in state: 344.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 347.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 351.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 355.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 356.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 358.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE VAL
##
## Ends in an error in state: 360.
##
## list(top_level_stmt) -> INTERFACE IDENT LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 362.
##
## list(top_level_stmt) -> INTERFACE IDENT LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 366.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS VAL
##
## Ends in an error in state: 367.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS IDENT VAL
##
## Ends in an error in state: 368.
##
## expr -> expr . DOT IDENT [ SEMICOLON DOT ]
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS IDENT SEMICOLON VAL
##
## Ends in an error in state: 369.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS VAL
##
## Ends in an error in state: 371.
##
## list(top_level_stmt) -> LET IDENT EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT VAL
##
## Ends in an error in state: 372.
##
## expr -> expr . DOT IDENT [ SEMICOLON DOT ]
## list(top_level_stmt) -> LET IDENT EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 83, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT SEMICOLON VAL
##
## Ends in an error in state: 373.
##
## list(top_level_stmt) -> LET IDENT EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 377.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 378.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 381.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(struct_field) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE UNION
##
## Ends in an error in state: 383.
##
## list(top_level_stmt) -> STRUCT IDENT LBRACE . list(struct_field) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 386.
##
## list(top_level_stmt) -> STRUCT IDENT LBRACE list(struct_field) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE list(struct_field) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 390.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE VAL
##
## Ends in an error in state: 391.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 394.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE VAL
##
## Ends in an error in state: 396.
##
## list(top_level_stmt) -> UNION IDENT LBRACE . list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 399.
##
## list(top_level_stmt) -> UNION IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE list(preceded(CASE,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

