program: TYPE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION UNION
##
## Ends in an error in state: 1.
##
## list(top_level_stmt) -> UNION . IDENT LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT UNION
##
## Ends in an error in state: 2.
##
## list(top_level_stmt) -> UNION IDENT . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN UNION
##
## Ends in an error in state: 3.
##
## list(top_level_stmt) -> UNION IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT UNION
##
## Ends in an error in state: 4.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON TYPE
##
## Ends in an error in state: 5.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION UNION
##
## Ends in an error in state: 6.
##
## expr -> UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION LBRACE TYPE
##
## Ends in an error in state: 7.
##
## expr -> UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE UNION UNION
##
## Ends in an error in state: 8.
##
## union_member -> UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE UNION LBRACE TYPE
##
## Ends in an error in state: 9.
##
## union_member -> UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE STRUCT UNION
##
## Ends in an error in state: 10.
##
## union_member -> STRUCT . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> STRUCT . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE STRUCT LBRACE UNION
##
## Ends in an error in state: 11.
##
## union_member -> STRUCT LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> STRUCT LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT UNION
##
## Ends in an error in state: 12.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COLON expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . COLON expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT COMMA UNION
##
## Ends in an error in state: 13.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COMMA . nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COMMA . separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT COLON TYPE
##
## Ends in an error in state: 16.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT UNION
##
## Ends in an error in state: 17.
##
## expr -> STRUCT . option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> STRUCT . option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> STRUCT . option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT . option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LPAREN UNION
##
## Ends in an error in state: 18.
##
## option(params) -> LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN [ LBRACE ]
## option(params) -> LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LPAREN RPAREN UNION
##
## Ends in an error in state: 24.
##
## expr -> STRUCT option(params) . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> STRUCT option(params) . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> STRUCT option(params) . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT option(params) . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LBRACE UNION
##
## Ends in an error in state: 25.
##
## expr -> STRUCT option(params) LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> STRUCT option(params) LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> STRUCT option(params) LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT option(params) LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN UNION
##
## Ends in an error in state: 28.
##
## function_definition(located(ident)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT UNION
##
## Ends in an error in state: 29.
##
## function_definition(located(ident)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN UNION
##
## Ends in an error in state: 30.
##
## function_definition(located(ident)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located(ident)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 32.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW TYPE
##
## Ends in an error in state: 33.
##
## option(preceded(RARROW,located(fexpr))) -> RARROW . fexpr [ UNION STRUCT SEMICOLON RPAREN RBRACE LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW UNION UNION
##
## Ends in an error in state: 34.
##
## fexpr -> UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW UNION LBRACE TYPE
##
## Ends in an error in state: 35.
##
## fexpr -> UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE INTERFACE UNION
##
## Ends in an error in state: 36.
##
## union_member -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE INTERFACE LBRACE UNION
##
## Ends in an error in state: 37.
##
## union_member -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN UNION
##
## Ends in an error in state: 38.
##
## function_definition(located(ident)) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT UNION
##
## Ends in an error in state: 39.
##
## function_definition(located(ident)) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN UNION
##
## Ends in an error in state: 40.
##
## function_definition(located(ident)) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
## function_definition(located(ident)) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 42.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 43.
##
## function_definition(located(ident)) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE TYPE
##
## Ends in an error in state: 44.
##
## code_block -> LBRACE . list(located(stmt)) RBRACE [ UNION STRUCT SEMICOLON RPAREN RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE RETURN TYPE
##
## Ends in an error in state: 45.
##
## stmt -> RETURN . expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN TYPE
##
## Ends in an error in state: 46.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ LPAREN ]
## fexpr -> LPAREN . function_definition(nothing) RPAREN [ LPAREN ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . INTERFACE LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN . IDENT RPAREN [ LBRACE ]
## type_expr -> LPAREN . function_call RPAREN [ LBRACE ]
## type_expr -> LPAREN . INT RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION UNION
##
## Ends in an error in state: 47.
##
## fexpr -> UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN UNION . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION LBRACE TYPE
##
## Ends in an error in state: 48.
##
## fexpr -> UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN UNION LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE IDENT UNION
##
## Ends in an error in state: 49.
##
## union_member -> IDENT . [ RBRACE FN COMMA ]
## union_member -> IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN COMMA ]
## union_member -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE IDENT LPAREN TYPE
##
## Ends in an error in state: 50.
##
## union_member -> IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN COMMA ]
## union_member -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE UNION
##
## Ends in an error in state: 51.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE LBRACE UNION
##
## Ends in an error in state: 52.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 54.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 55.
##
## list(located(function_signature_binding)) -> function_definition(located(ident)) . list(located(function_signature_binding)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS INT UNION
##
## Ends in an error in state: 57.
##
## expr -> INT . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> INT . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT UNION
##
## Ends in an error in state: 58.
##
## expr -> IDENT . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN UNION
##
## Ends in an error in state: 59.
##
## function_definition(nothing) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
## function_definition(nothing) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN UNION
##
## Ends in an error in state: 60.
##
## function_definition(nothing) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
## function_definition(nothing) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 62.
##
## function_definition(nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT UNION
##
## Ends in an error in state: 63.
##
## function_definition(nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN RPAREN UNION
##
## Ends in an error in state: 67.
##
## function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS FN LPAREN RPAREN RARROW IDENT UNION
##
## Ends in an error in state: 68.
##
## function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM UNION
##
## Ends in an error in state: 70.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE UNION
##
## Ends in an error in state: 71.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT UNION
##
## Ends in an error in state: 72.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS TYPE
##
## Ends in an error in state: 73.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT RPAREN UNION
##
## Ends in an error in state: 74.
##
## struct_constructor -> type_expr . LBRACE nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## struct_constructor -> type_expr . LBRACE loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE UNION
##
## Ends in an error in state: 75.
##
## struct_constructor -> type_expr LBRACE . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
## struct_constructor -> type_expr LBRACE . loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ SEMICOLON RPAREN RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## type_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT UNION
##
## Ends in an error in state: 76.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON TYPE
##
## Ends in an error in state: 77.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 80.
##
## expr -> function_call . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN INT UNION
##
## Ends in an error in state: 81.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RPAREN RBRACE LPAREN LBRACE FN COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RPAREN RBRACE LPAREN LBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN TYPE
##
## Ends in an error in state: 82.
##
## function_call -> fexpr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## function_call -> fexpr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN IDENT SEMICOLON
##
## Ends in an error in state: 88.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LPAREN IDENT COMMA TYPE
##
## Ends in an error in state: 89.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 92.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT LBRACE IDENT COLON IDENT COMMA UNION
##
## Ends in an error in state: 93.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS IDENT SEMICOLON
##
## Ends in an error in state: 101.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT EQUALS IDENT COMMA UNION
##
## Ends in an error in state: 102.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT COMMA UNION
##
## Ends in an error in state: 105.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 111.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN LPAREN RPAREN UNION
##
## Ends in an error in state: 112.
##
## list(sugared_function_definition) -> function_definition(located_ident_with_params) . list(sugared_function_definition) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 274, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 275, spurious reduction of production option(code_block) ->
## In state 276, spurious reduction of production function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 114.
##
## list(sugared_function_definition) -> function_definition(located(ident)) . list(sugared_function_definition) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 267, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 219, spurious reduction of production option(code_block) ->
## In state 220, spurious reduction of production function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 118.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE ENUM UNION
##
## Ends in an error in state: 123.
##
## union_member -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE ENUM LBRACE UNION
##
## Ends in an error in state: 124.
##
## union_member -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
## union_member -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ RBRACE FN COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 131.
##
## nonempty_list(terminated(located(union_member),COMMA)) -> union_member . COMMA [ RBRACE FN ]
## nonempty_list(terminated(located(union_member),COMMA)) -> union_member . COMMA nonempty_list(terminated(located(union_member),COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,located(union_member)) -> union_member . [ RBRACE FN ]
## separated_nonempty_list(COMMA,located(union_member)) -> union_member . COMMA separated_nonempty_list(COMMA,located(union_member)) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## union_member
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE IDENT COMMA TYPE
##
## Ends in an error in state: 132.
##
## nonempty_list(terminated(located(union_member),COMMA)) -> union_member COMMA . [ RBRACE FN ]
## nonempty_list(terminated(located(union_member),COMMA)) -> union_member COMMA . nonempty_list(terminated(located(union_member),COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,located(union_member)) -> union_member COMMA . separated_nonempty_list(COMMA,located(union_member)) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## union_member COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 138.
##
## fexpr -> UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 142.
##
## fexpr -> UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT UNION
##
## Ends in an error in state: 144.
##
## fexpr -> STRUCT . option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT . option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LPAREN RPAREN UNION
##
## Ends in an error in state: 145.
##
## fexpr -> STRUCT option(params) . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT option(params) . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LBRACE UNION
##
## Ends in an error in state: 146.
##
## fexpr -> STRUCT option(params) LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> STRUCT option(params) LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 149.
##
## fexpr -> STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 153.
##
## fexpr -> STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE UNION
##
## Ends in an error in state: 155.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE LBRACE UNION
##
## Ends in an error in state: 156.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 158.
##
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN ]
## type_expr -> LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN INT UNION
##
## Ends in an error in state: 160.
##
## fexpr -> INT . [ LPAREN ]
## type_expr -> LPAREN INT . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT UNION
##
## Ends in an error in state: 162.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> LPAREN IDENT . RPAREN [ LBRACE ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM UNION
##
## Ends in an error in state: 164.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE UNION
##
## Ends in an error in state: 165.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ LPAREN ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
## type_expr -> LPAREN ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 168.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 172.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . [ LPAREN ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT LBRACE RBRACE UNION
##
## Ends in an error in state: 174.
##
## fexpr -> LPAREN struct_constructor . RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN struct_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN FN LPAREN RPAREN SEMICOLON
##
## Ends in an error in state: 176.
##
## fexpr -> LPAREN function_definition(nothing) . RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN function_definition(nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 67, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 68, spurious reduction of production option(code_block) ->
## In state 69, spurious reduction of production function_definition(nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS LPAREN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 178.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> LPAREN function_call . RPAREN [ LBRACE ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE RETURN IDENT RPAREN
##
## Ends in an error in state: 180.
##
## stmt -> RETURN expr . SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET UNION
##
## Ends in an error in state: 182.
##
## stmt -> LET . IDENT EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## stmt -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## stmt -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT UNION
##
## Ends in an error in state: 183.
##
## stmt -> LET IDENT . EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## stmt -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## stmt -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN UNION
##
## Ends in an error in state: 184.
##
## stmt -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## stmt -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 186.
##
## stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS TYPE
##
## Ends in an error in state: 187.
##
## stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT RPAREN
##
## Ends in an error in state: 188.
##
## stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 191.
##
## stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN EQUALS TYPE
##
## Ends in an error in state: 192.
##
## stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT LPAREN RPAREN EQUALS IDENT RPAREN
##
## Ends in an error in state: 193.
##
## stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT EQUALS TYPE
##
## Ends in an error in state: 195.
##
## stmt -> LET IDENT EQUALS . expr SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LET IDENT EQUALS IDENT RPAREN
##
## Ends in an error in state: 196.
##
## stmt -> LET IDENT EQUALS expr . SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF UNION
##
## Ends in an error in state: 198.
##
## if_ -> IF . LPAREN expr RPAREN code_block option(located(else_)) [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN TYPE
##
## Ends in an error in state: 199.
##
## if_ -> IF LPAREN . expr RPAREN code_block option(located(else_)) [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT SEMICOLON
##
## Ends in an error in state: 200.
##
## if_ -> IF LPAREN expr . RPAREN code_block option(located(else_)) [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN UNION
##
## Ends in an error in state: 201.
##
## if_ -> IF LPAREN expr RPAREN . code_block option(located(else_)) [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 202.
##
## if_ -> IF LPAREN expr RPAREN code_block . option(located(else_)) [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN code_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IF LPAREN IDENT RPAREN LBRACE RBRACE ELSE UNION
##
## Ends in an error in state: 203.
##
## else_ -> ELSE . if_ [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
## else_ -> ELSE . code_block [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE LBRACE RBRACE TYPE
##
## Ends in an error in state: 208.
##
## list(located(stmt)) -> stmt . list(located(stmt)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LBRACE IDENT RPAREN
##
## Ends in an error in state: 211.
##
## stmt -> expr . SEMICOLON [ UNION STRUCT RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN ENUM ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE FN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 218.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 219.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT UNION
##
## Ends in an error in state: 229.
##
## fexpr -> STRUCT . option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> STRUCT . option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT LPAREN RPAREN UNION
##
## Ends in an error in state: 230.
##
## fexpr -> STRUCT option(params) . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> STRUCT option(params) . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW STRUCT LBRACE UNION
##
## Ends in an error in state: 231.
##
## fexpr -> STRUCT option(params) LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> STRUCT option(params) LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN TYPE
##
## Ends in an error in state: 238.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> LPAREN . function_definition(nothing) RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW INTERFACE UNION
##
## Ends in an error in state: 239.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW INTERFACE LBRACE UNION
##
## Ends in an error in state: 240.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN IDENT UNION
##
## Ends in an error in state: 244.
##
## fexpr -> IDENT . [ LPAREN ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW ENUM UNION
##
## Ends in an error in state: 245.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW ENUM LBRACE UNION
##
## Ends in an error in state: 246.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW LPAREN IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 253.
##
## fexpr -> function_call . [ LPAREN ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RARROW IDENT TYPE
##
## Ends in an error in state: 256.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ UNION STRUCT SEMICOLON RPAREN RBRACE LPAREN LET LBRACE INTERFACE FN EOF ENUM COMMA ]
## option(preceded(RARROW,located(fexpr))) -> RARROW fexpr . [ UNION STRUCT SEMICOLON RPAREN RBRACE LET LBRACE INTERFACE FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN UNION
##
## Ends in an error in state: 257.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 259.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 260.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN TYPE
##
## Ends in an error in state: 263.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LPAREN RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 264.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN TYPE
##
## Ends in an error in state: 267.
##
## function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN UNION
##
## Ends in an error in state: 268.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 270.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN IDENT COLON IDENT COMMA RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 271.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN TYPE
##
## Ends in an error in state: 274.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RARROW IDENT SEMICOLON
##
## Ends in an error in state: 275.
##
## function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(code_block) [ UNION STRUCT RBRACE LET INTERFACE FN EOF ENUM ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 256, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 278.
##
## expr -> STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 281.
##
## expr -> STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 282.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT COLON IDENT COMMA UNION
##
## Ends in an error in state: 283.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(struct_fields,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,struct_fields) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 300.
##
## expr -> UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 303.
##
## expr -> UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . [ SEMICOLON RPAREN RBRACE FN COMMA ]
## fexpr -> UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . [ LPAREN ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 304.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA UNION
##
## Ends in an error in state: 305.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 309.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE TYPE
##
## Ends in an error in state: 310.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 313.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT UNION
##
## Ends in an error in state: 314.
##
## list(top_level_stmt) -> STRUCT . IDENT LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT UNION
##
## Ends in an error in state: 315.
##
## list(top_level_stmt) -> STRUCT IDENT . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN UNION
##
## Ends in an error in state: 316.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 318.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 319.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 322.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET UNION
##
## Ends in an error in state: 323.
##
## list(top_level_stmt) -> LET . IDENT EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT UNION
##
## Ends in an error in state: 324.
##
## list(top_level_stmt) -> LET IDENT . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN UNION
##
## Ends in an error in state: 325.
##
## list(top_level_stmt) -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 327.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS TYPE
##
## Ends in an error in state: 328.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT RPAREN
##
## Ends in an error in state: 329.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT SEMICOLON TYPE
##
## Ends in an error in state: 330.
##
## list(top_level_stmt) -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE UNION
##
## Ends in an error in state: 331.
##
## list(top_level_stmt) -> INTERFACE . IDENT LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT UNION
##
## Ends in an error in state: 332.
##
## list(top_level_stmt) -> INTERFACE IDENT . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN UNION
##
## Ends in an error in state: 333.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> INTERFACE IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 335.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 336.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 338.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM UNION
##
## Ends in an error in state: 339.
##
## list(top_level_stmt) -> ENUM . IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT UNION
##
## Ends in an error in state: 340.
##
## list(top_level_stmt) -> ENUM IDENT . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN UNION
##
## Ends in an error in state: 341.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN UNION
##
## Ends in an error in state: 343.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE UNION
##
## Ends in an error in state: 344.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 347.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN LPAREN RPAREN RBRACE
##
## Ends in an error in state: 349.
##
## list(top_level_stmt) -> function_definition(located_ident_with_params) . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 274, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 275, spurious reduction of production option(code_block) ->
## In state 276, spurious reduction of production function_definition(located_ident_with_params) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN RBRACE
##
## Ends in an error in state: 351.
##
## list(top_level_stmt) -> function_definition(located(ident)) . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 267, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 219, spurious reduction of production option(code_block) ->
## In state 220, spurious reduction of production function_definition(located(ident)) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(code_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 355.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 358.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 359.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 362.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LPAREN RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 366.
##
## list(top_level_stmt) -> ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE UNION
##
## Ends in an error in state: 368.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> ENUM IDENT LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 371.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENUM IDENT LBRACE RBRACE TYPE
##
## Ends in an error in state: 375.
##
## list(top_level_stmt) -> ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 379.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 380.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LPAREN RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 382.
##
## list(top_level_stmt) -> INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE UNION
##
## Ends in an error in state: 384.
##
## list(top_level_stmt) -> INTERFACE IDENT LBRACE . list(located(function_signature_binding)) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE RBRACE TYPE
##
## Ends in an error in state: 386.
##
## list(top_level_stmt) -> INTERFACE IDENT LBRACE list(located(function_signature_binding)) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE list(located(function_signature_binding)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 390.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS TYPE
##
## Ends in an error in state: 391.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS IDENT RPAREN
##
## Ends in an error in state: 392.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT LPAREN RPAREN EQUALS IDENT SEMICOLON TYPE
##
## Ends in an error in state: 393.
##
## list(top_level_stmt) -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS TYPE
##
## Ends in an error in state: 395.
##
## list(top_level_stmt) -> LET IDENT EQUALS . expr SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT RPAREN
##
## Ends in an error in state: 396.
##
## list(top_level_stmt) -> LET IDENT EQUALS expr . SEMICOLON list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production expr -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET IDENT EQUALS IDENT SEMICOLON TYPE
##
## Ends in an error in state: 397.
##
## list(top_level_stmt) -> LET IDENT EQUALS expr SEMICOLON . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT EQUALS expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 402.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 405.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE UNION
##
## Ends in an error in state: 406.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 409.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LPAREN RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 413.
##
## list(top_level_stmt) -> STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE UNION
##
## Ends in an error in state: 415.
##
## list(top_level_stmt) -> STRUCT IDENT LBRACE . nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> STRUCT IDENT LBRACE . loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 418.
##
## list(top_level_stmt) -> STRUCT IDENT LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE nonempty_list(terminated(struct_fields,COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT IDENT LBRACE RBRACE TYPE
##
## Ends in an error in state: 422.
##
## list(top_level_stmt) -> STRUCT IDENT LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE loption(separated_nonempty_list(COMMA,struct_fields)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN IDENT COLON IDENT COMMA RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 427.
##
## list(top_level_stmt) -> UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN UNION
##
## Ends in an error in state: 430.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE TYPE
##
## Ends in an error in state: 431.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 434.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LPAREN RPAREN LBRACE RBRACE TYPE
##
## Ends in an error in state: 438.
##
## list(top_level_stmt) -> UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE TYPE
##
## Ends in an error in state: 440.
##
## list(top_level_stmt) -> UNION IDENT LBRACE . nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
## list(top_level_stmt) -> UNION IDENT LBRACE . loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE IDENT COMMA RBRACE TYPE
##
## Ends in an error in state: 443.
##
## list(top_level_stmt) -> UNION IDENT LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE nonempty_list(terminated(located(union_member),COMMA)) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: UNION IDENT LBRACE RBRACE TYPE
##
## Ends in an error in state: 447.
##
## list(top_level_stmt) -> UNION IDENT LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE . list(top_level_stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE loption(separated_nonempty_list(COMMA,located(union_member))) list(sugared_function_definition) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

