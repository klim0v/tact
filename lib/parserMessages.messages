program: STRUCT
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE TYPE
##
## Ends in an error in state: 1.
##
## list(top_level_expr) -> TYPE . IDENT EQUALS expr list(top_level_expr) [ EOF ]
## list(top_level_expr) -> TYPE . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
## list(top_level_expr) -> TYPE . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT TYPE
##
## Ends in an error in state: 2.
##
## list(top_level_expr) -> TYPE IDENT . EQUALS expr list(top_level_expr) [ EOF ]
## list(top_level_expr) -> TYPE IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
## list(top_level_expr) -> TYPE IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN TYPE
##
## Ends in an error in state: 3.
##
## list(top_level_expr) -> TYPE IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
## list(top_level_expr) -> TYPE IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT TYPE
##
## Ends in an error in state: 4.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON TYPE
##
## Ends in an error in state: 5.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT TYPE
##
## Ends in an error in state: 6.
##
## expr -> STRUCT . LBRACKET nonempty_list(terminated(struct_fields,COMMA)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> STRUCT . LBRACKET loption(separated_nonempty_list(COMMA,struct_fields)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT LBRACKET TYPE
##
## Ends in an error in state: 7.
##
## expr -> STRUCT LBRACKET . nonempty_list(terminated(struct_fields,COMMA)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> STRUCT LBRACKET . loption(separated_nonempty_list(COMMA,struct_fields)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT LBRACKET IDENT TYPE
##
## Ends in an error in state: 8.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COLON expr COMMA [ RBRACKET ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . COLON expr [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT LBRACKET IDENT COLON TYPE
##
## Ends in an error in state: 9.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON . expr COMMA [ RBRACKET ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON . expr [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS INTERFACE TYPE
##
## Ends in an error in state: 10.
##
## expr -> INTERFACE . LBRACKET RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS INTERFACE LBRACKET TYPE
##
## Ends in an error in state: 11.
##
## expr -> INTERFACE LBRACKET . RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN TYPE
##
## Ends in an error in state: 15.
##
## expr -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN TYPE
##
## Ends in an error in state: 16.
##
## expr -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 19.
##
## expr -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM TYPE
##
## Ends in an error in state: 20.
##
## expr -> ENUM . LBRACKET nonempty_list(terminated(enum_member,COMMA)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> ENUM . LBRACKET loption(separated_nonempty_list(COMMA,enum_member)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET TYPE
##
## Ends in an error in state: 21.
##
## expr -> ENUM LBRACKET . nonempty_list(terminated(enum_member,COMMA)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> ENUM LBRACKET . loption(separated_nonempty_list(COMMA,enum_member)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET IDENT TYPE
##
## Ends in an error in state: 22.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET IDENT EQUALS TYPE
##
## Ends in an error in state: 23.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET IDENT EQUALS IDENT TYPE
##
## Ends in an error in state: 24.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACKET LPAREN COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACKET LPAREN COMMA ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS IDENT LPAREN TYPE
##
## Ends in an error in state: 25.
##
## expr -> expr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS IDENT LPAREN IDENT TYPE
##
## Ends in an error in state: 31.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN LPAREN COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN LPAREN COMMA ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS IDENT LPAREN IDENT COMMA TYPE
##
## Ends in an error in state: 32.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET IDENT EQUALS IDENT COMMA TYPE
##
## Ends in an error in state: 35.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS ENUM LBRACKET IDENT COMMA TYPE
##
## Ends in an error in state: 38.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACKET ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN IDENT TYPE
##
## Ends in an error in state: 46.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACKET ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACKET ]
## expr -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr . LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN IDENT COLON IDENT COMMA RPAREN IDENT LBRACKET TYPE
##
## Ends in an error in state: 47.
##
## expr -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET . list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN IDENT LBRACKET IDENT TYPE
##
## Ends in an error in state: 50.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ STRUCT RBRACKET LPAREN INTERFACE INT IDENT FN ENUM ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ STRUCT RBRACKET LPAREN INTERFACE INT IDENT FN ENUM ]
## list(located(expr)) -> expr . list(located(expr)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN RPAREN TYPE
##
## Ends in an error in state: 53.
##
## expr -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . expr LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN RPAREN IDENT TYPE
##
## Ends in an error in state: 54.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACKET ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACKET ]
## expr -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr . LBRACKET list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS FN LPAREN RPAREN IDENT LBRACKET TYPE
##
## Ends in an error in state: 55.
##
## expr -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET . list(located(expr)) RBRACKET [ TYPE STRUCT RPAREN RBRACKET LPAREN LBRACKET INTERFACE INT IDENT FN EOF ENUM COMMA ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT LBRACKET IDENT COLON IDENT TYPE
##
## Ends in an error in state: 58.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACKET LPAREN COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACKET LPAREN COMMA ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr . COMMA [ RBRACKET ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(struct_fields,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr . [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,struct_fields) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS STRUCT LBRACKET IDENT COLON IDENT COMMA TYPE
##
## Ends in an error in state: 59.
##
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr COMMA . [ RBRACKET ]
## nonempty_list(terminated(struct_fields,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(struct_fields,COMMA)) [ RBRACKET ]
## separated_nonempty_list(COMMA,struct_fields) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,struct_fields) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT TYPE
##
## Ends in an error in state: 67.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN LPAREN COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN LPAREN COMMA ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA TYPE
##
## Ends in an error in state: 68.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 72.
##
## list(top_level_expr) -> TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS TYPE
##
## Ends in an error in state: 73.
##
## list(top_level_expr) -> TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN IDENT COLON IDENT COMMA RPAREN EQUALS IDENT STRUCT
##
## Ends in an error in state: 74.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ TYPE LPAREN FN EOF ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ TYPE LPAREN FN EOF ]
## list(top_level_expr) -> TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN TYPE
##
## Ends in an error in state: 75.
##
## list(top_level_expr) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
## list(top_level_expr) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT TYPE
##
## Ends in an error in state: 76.
##
## list(top_level_expr) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
## list(top_level_expr) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN TYPE
##
## Ends in an error in state: 77.
##
## list(top_level_expr) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
## list(top_level_expr) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN TYPE
##
## Ends in an error in state: 79.
##
## list(top_level_expr) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN IDENT TYPE
##
## Ends in an error in state: 80.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACKET ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACKET ]
## list(top_level_expr) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr . LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN IDENT LBRACKET TYPE
##
## Ends in an error in state: 81.
##
## list(top_level_expr) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET . list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN IDENT COLON IDENT COMMA RPAREN IDENT LBRACKET RBRACKET STRUCT
##
## Ends in an error in state: 83.
##
## list(top_level_expr) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET . list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN expr LBRACKET list(located(expr)) RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN TYPE
##
## Ends in an error in state: 86.
##
## list(top_level_expr) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . expr LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN IDENT TYPE
##
## Ends in an error in state: 87.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACKET ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACKET ]
## list(top_level_expr) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr . LBRACKET list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN IDENT LBRACKET TYPE
##
## Ends in an error in state: 88.
##
## list(top_level_expr) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET . list(located(expr)) RBRACKET list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FN IDENT LPAREN RPAREN IDENT LBRACKET RBRACKET STRUCT
##
## Ends in an error in state: 90.
##
## list(top_level_expr) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET . list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN expr LBRACKET list(located(expr)) RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN RPAREN TYPE
##
## Ends in an error in state: 94.
##
## list(top_level_expr) -> TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN RPAREN EQUALS TYPE
##
## Ends in an error in state: 95.
##
## list(top_level_expr) -> TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT LPAREN RPAREN EQUALS IDENT STRUCT
##
## Ends in an error in state: 96.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ TYPE LPAREN FN EOF ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ TYPE LPAREN FN EOF ]
## list(top_level_expr) -> TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS TYPE
##
## Ends in an error in state: 98.
##
## list(top_level_expr) -> TYPE IDENT EQUALS . expr list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQUALS IDENT STRUCT
##
## Ends in an error in state: 99.
##
## expr -> expr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ TYPE LPAREN FN EOF ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ TYPE LPAREN FN EOF ]
## list(top_level_expr) -> TYPE IDENT EQUALS expr . list(top_level_expr) [ EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

