just_stmt: VAL
##
## Ends in an error in state: 0.
##
## just_stmt' -> . just_stmt [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid syntax

just_stmt: UNION VAL
##
## Ends in an error in state: 1.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ DOT ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## non_semicolon_stmt -> UNION . IDENT LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

just_stmt: UNION LBRACE VAL
##
## Ends in an error in state: 2.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ DOT ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

just_stmt: UNION LBRACE CASE VAL
##
## Ends in an error in state: 3.
##
## list(preceded(CASE,located(expr))) -> CASE . expr list(preceded(CASE,located(expr))) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## CASE
##

Invalid syntax

just_stmt: RETURN UNION VAL
##
## Ends in an error in state: 4.
##
## expr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

just_stmt: RETURN UNION LBRACE VAL
##
## Ends in an error in state: 5.
##
## expr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

just_stmt: ENUM LBRACE FN VAL
##
## Ends in an error in state: 7.
##
## function_definition(located(ident),option(located(code_block))) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(located(code_block))) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT VAL
##
## Ends in an error in state: 8.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(located(code_block))) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 9.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

just_stmt: FN LPAREN IDENT VAL
##
## Ends in an error in state: 10.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA [ RPAREN RBRACKET ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON VAL
##
## Ends in an error in state: 11.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA [ RPAREN RBRACKET ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Invalid syntax

just_stmt: RETURN TILDE VAL
##
## Ends in an error in state: 12.
##
## expr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> TILDE . IDENT [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

just_stmt: RETURN TILDE IDENT UNION
##
## Ends in an error in state: 13.
##
## expr -> TILDE IDENT . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> TILDE IDENT . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

Invalid syntax

just_stmt: RETURN STRUCT VAL
##
## Ends in an error in state: 14.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

just_stmt: STRUCT LBRACKET VAL
##
## Ends in an error in state: 15.
##
## option(params) -> LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET [ LBRACE ]
## option(params) -> LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Invalid syntax

just_stmt: STRUCT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 17.
##
## option(params) -> LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: STRUCT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 19.
##
## option(params) -> LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: RETURN STRUCT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 21.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

just_stmt: RETURN STRUCT LBRACE UNION
##
## Ends in an error in state: 22.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

just_stmt: STRUCT LBRACE VAL VAL
##
## Ends in an error in state: 23.
##
## list(struct_field) -> VAL . IDENT COLON expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL
##

Invalid syntax

just_stmt: STRUCT LBRACE VAL IDENT VAL
##
## Ends in an error in state: 24.
##
## list(struct_field) -> VAL IDENT . COLON expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT
##

Invalid syntax

just_stmt: STRUCT LBRACE VAL IDENT COLON VAL
##
## Ends in an error in state: 25.
##
## list(struct_field) -> VAL IDENT COLON . expr option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON
##

Invalid syntax

just_stmt: RETURN STRING UNION
##
## Ends in an error in state: 26.
##
## expr -> STRING . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> STRING . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## STRING
##

Invalid syntax

just_stmt: LPAREN VAL
##
## Ends in an error in state: 27.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ LPAREN LBRACKET ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ LPAREN LBRACKET ]
## type_expr -> LPAREN . STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . INTERFACE LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . IDENT RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . function_call RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . INT RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . BOOL RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . STRING RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN . TILDE IDENT RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Invalid syntax

just_stmt: LPAREN UNION VAL
##
## Ends in an error in state: 28.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION
##

Invalid syntax

just_stmt: LPAREN UNION LBRACE VAL
##
## Ends in an error in state: 29.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE
##

Invalid syntax

just_stmt: UNION LBRACE IMPL VAL
##
## Ends in an error in state: 32.
##
## list(impl) -> IMPL . fexpr LBRACE list(sugared_function_definition(option(located(code_block)))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL
##

Invalid syntax

just_stmt: LET IDENT COLON UNION VAL
##
## Ends in an error in state: 33.
##
## fexpr -> UNION . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## UNION
##

Invalid syntax

just_stmt: LET IDENT COLON UNION LBRACE VAL
##
## Ends in an error in state: 34.
##
## fexpr -> UNION LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 39.
##
## list(sugared_function_definition(option(located(code_block)))) -> function_definition(located_ident_with_params,option(located(code_block))) . list(sugared_function_definition(option(located(code_block)))) [ RBRACE IMPL ]
##
## The known suffix of the stack is as follows:
## function_definition(located_ident_with_params,option(located(code_block)))
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 41.
##
## list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) . list(sugared_function_definition(option(located(code_block)))) [ RBRACE IMPL ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),option(located(code_block)))
##

Invalid syntax

just_stmt: LET IDENT COLON TILDE VAL
##
## Ends in an error in state: 43.
##
## fexpr -> TILDE . IDENT [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

just_stmt: LET IDENT COLON STRUCT VAL
##
## Ends in an error in state: 45.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

just_stmt: LET IDENT COLON STRUCT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 46.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

just_stmt: LET IDENT COLON STRUCT LBRACE UNION
##
## Ends in an error in state: 47.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

just_stmt: UNION LBRACE IMPL LPAREN VAL
##
## Ends in an error in state: 53.
##
## fexpr -> LPAREN . struct_constructor RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> LPAREN . function_definition(nothing,nothing) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Invalid syntax

just_stmt: LET IDENT COLON INTERFACE VAL
##
## Ends in an error in state: 54.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

just_stmt: LET IDENT COLON INTERFACE LBRACE VAL
##
## Ends in an error in state: 55.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN VAL
##
## Ends in an error in state: 56.
##
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT VAL
##
## Ends in an error in state: 57.
##
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN VAL
##
## Ends in an error in state: 58.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
## function_definition(located(ident),nothing) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 59.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 60.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: FN LPAREN RPAREN RARROW VAL
##
## Ends in an error in state: 61.
##
## option(preceded(RARROW,located(fexpr))) -> RARROW . fexpr [ VAL SEMICOLON RPAREN RBRACKET RBRACE LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## RARROW
##

Invalid syntax

just_stmt: LET IDENT COLON ENUM VAL
##
## Ends in an error in state: 64.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

just_stmt: LET IDENT COLON ENUM LBRACE VAL
##
## Ends in an error in state: 65.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT VAL
##
## Ends in an error in state: 66.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT . EQUALS expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT . EQUALS expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT EQUALS VAL
##
## Ends in an error in state: 67.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS . expr COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS . expr COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

Invalid syntax

just_stmt: RETURN INTERFACE VAL
##
## Ends in an error in state: 68.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

just_stmt: RETURN INTERFACE LBRACE VAL
##
## Ends in an error in state: 69.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

just_stmt: RETURN INTERFACE LBRACE RBRACE UNION
##
## Ends in an error in state: 71.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 72.
##
## list(located(function_signature_binding)) -> function_definition(located(ident),nothing) . list(located(function_signature_binding)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## function_definition(located(ident),nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 384, spurious reduction of production function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

Invalid syntax

just_stmt: RETURN INT UNION
##
## Ends in an error in state: 74.
##
## expr -> INT . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> INT . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## INT
##

Invalid syntax

just_stmt: RETURN IDENT UNION
##
## Ends in an error in state: 75.
##
## expr -> IDENT . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> IDENT . [ LPAREN LBRACKET ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: RETURN FN VAL
##
## Ends in an error in state: 76.
##
## function_definition(nothing,option(located(code_block))) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## function_definition(nothing,option(located(code_block))) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

just_stmt: RETURN FN LPAREN VAL
##
## Ends in an error in state: 77.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## function_definition(nothing,option(located(code_block))) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

just_stmt: RETURN FN LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 78.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: RETURN FN LPAREN IDENT COLON BOOL COMMA RPAREN UNION
##
## Ends in an error in state: 79.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: LBRACE VAL
##
## Ends in an error in state: 81.
##
## code_block -> LBRACE . block_stmt RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACKET RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
## code_block -> LBRACE . RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACKET RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Invalid syntax

just_stmt: TILDE VAL
##
## Ends in an error in state: 82.
##
## expr -> TILDE . IDENT [ DOT ]
## fexpr -> TILDE . IDENT [ LPAREN LBRACKET ]
## stmt_expr -> TILDE . IDENT [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE
##

Invalid syntax

just_stmt: TILDE IDENT VAL
##
## Ends in an error in state: 83.
##
## expr -> TILDE IDENT . [ DOT ]
## fexpr -> TILDE IDENT . [ LPAREN LBRACKET ]
## stmt_expr -> TILDE IDENT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## TILDE IDENT
##

Invalid syntax

just_stmt: SWITCH VAL
##
## Ends in an error in state: 84.
##
## switch -> SWITCH . LPAREN expr RPAREN LBRACE list(located(switch_branch)) option(default_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

Invalid syntax

just_stmt: SWITCH LPAREN VAL
##
## Ends in an error in state: 85.
##
## switch -> SWITCH LPAREN . expr RPAREN LBRACE list(located(switch_branch)) option(default_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN
##

Invalid syntax

just_stmt: RETURN ENUM VAL
##
## Ends in an error in state: 86.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

just_stmt: RETURN ENUM LBRACE VAL
##
## Ends in an error in state: 87.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

just_stmt: RETURN ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 90.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: RETURN ENUM LBRACE IDENT COMMA RBRACE UNION
##
## Ends in an error in state: 91.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: RETURN ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 93.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: RETURN ENUM LBRACE RBRACE UNION
##
## Ends in an error in state: 94.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: RETURN BOOL UNION
##
## Ends in an error in state: 95.
##
## expr -> BOOL . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> BOOL . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## BOOL
##

Invalid syntax

just_stmt: LPAREN BOOL RPAREN IDENT
##
## Ends in an error in state: 96.
##
## struct_constructor -> type_expr . LBRACE nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## struct_constructor -> type_expr . LBRACE loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## type_expr
##

Invalid syntax

just_stmt: IDENT LBRACE VAL
##
## Ends in an error in state: 97.
##
## struct_constructor -> type_expr LBRACE . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## struct_constructor -> type_expr LBRACE . loption(separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr)))) RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## type_expr LBRACE
##

Invalid syntax

just_stmt: IDENT LBRACE IDENT VAL
##
## Ends in an error in state: 98.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT . COLON expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT . COLON expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: IDENT LBRACE IDENT COLON VAL
##
## Ends in an error in state: 99.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON . expr COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON . expr COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Invalid syntax

just_stmt: RETURN BOOL LBRACKET RBRACKET UNION
##
## Ends in an error in state: 102.
##
## expr -> function_call . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> function_call . [ LPAREN LBRACKET ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

just_stmt: LET IDENT COLON BOOL VAL
##
## Ends in an error in state: 103.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
## function_call -> fexpr . LBRACKET nonempty_list(terminated(located(expr),COMMA)) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
## function_call -> fexpr . LBRACKET loption(separated_nonempty_list(COMMA,located(expr))) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr
##

Invalid syntax

just_stmt: BOOL LPAREN VAL
##
## Ends in an error in state: 104.
##
## function_call -> fexpr LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
## function_call -> fexpr LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN
##

Invalid syntax

just_stmt: BOOL LPAREN BOOL COMMA RBRACKET
##
## Ends in an error in state: 106.
##
## function_call -> fexpr LPAREN nonempty_list(terminated(located(expr),COMMA)) . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN nonempty_list(terminated(located(expr),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA
##

Invalid syntax

just_stmt: BOOL LPAREN BOOL RBRACKET
##
## Ends in an error in state: 108.
##
## function_call -> fexpr LPAREN loption(separated_nonempty_list(COMMA,located(expr))) . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LPAREN loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 110, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 105, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Invalid syntax

just_stmt: BOOL LBRACKET BOOL VAL
##
## Ends in an error in state: 110.
##
## expr -> expr . DOT IDENT [ RPAREN RBRACKET DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN RBRACKET DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN RBRACKET DOT COMMA ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA [ RPAREN RBRACKET ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr . COMMA nonempty_list(terminated(located(expr),COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: RETURN BOOL DOT VAL
##
## Ends in an error in state: 111.
##
## expr -> expr DOT . IDENT [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Invalid syntax

just_stmt: RETURN BOOL DOT IDENT UNION
##
## Ends in an error in state: 112.
##
## expr -> expr DOT IDENT . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

Invalid syntax

just_stmt: RETURN BOOL DOT IDENT LPAREN VAL
##
## Ends in an error in state: 113.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

Invalid syntax

just_stmt: RETURN BOOL DOT IDENT LPAREN BOOL COMMA RBRACKET
##
## Ends in an error in state: 114.
##
## expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA
##

Invalid syntax

just_stmt: RETURN BOOL DOT IDENT LPAREN BOOL RBRACKET
##
## Ends in an error in state: 116.
##
## expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 110, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 105, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Invalid syntax

just_stmt: BOOL LBRACKET BOOL COMMA VAL
##
## Ends in an error in state: 118.
##
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . [ RPAREN RBRACKET ]
## nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA . nonempty_list(terminated(located(expr),COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Invalid syntax

just_stmt: BOOL LBRACKET VAL
##
## Ends in an error in state: 121.
##
## function_call -> fexpr LBRACKET . nonempty_list(terminated(located(expr),COMMA)) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
## function_call -> fexpr LBRACKET . loption(separated_nonempty_list(COMMA,located(expr))) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LBRACKET
##

Invalid syntax

just_stmt: BOOL LBRACKET BOOL COMMA RPAREN
##
## Ends in an error in state: 122.
##
## function_call -> fexpr LBRACKET nonempty_list(terminated(located(expr),COMMA)) . RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LBRACKET nonempty_list(terminated(located(expr),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA
##

Invalid syntax

just_stmt: BOOL LBRACKET BOOL RPAREN
##
## Ends in an error in state: 124.
##
## function_call -> fexpr LBRACKET loption(separated_nonempty_list(COMMA,located(expr))) . RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL IDENT FN EQUALS EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## fexpr LBRACKET loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 110, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 105, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Invalid syntax

just_stmt: IDENT LBRACE IDENT COLON BOOL VAL
##
## Ends in an error in state: 126.
##
## expr -> expr . DOT IDENT [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE DOT COMMA ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: IDENT LBRACE IDENT COLON BOOL COMMA VAL
##
## Ends in an error in state: 127.
##
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . [ RBRACE ]
## nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(separated_pair(located(ident),COLON,located(expr)),COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,separated_pair(located(ident),COLON,located(expr))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL VAL
##
## Ends in an error in state: 135.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT ]
## switch -> SWITCH LPAREN expr . RPAREN LBRACE list(located(switch_branch)) option(default_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN VAL
##
## Ends in an error in state: 136.
##
## switch -> SWITCH LPAREN expr RPAREN . LBRACE list(located(switch_branch)) option(default_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr RPAREN
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE VAL
##
## Ends in an error in state: 137.
##
## switch -> SWITCH LPAREN expr RPAREN LBRACE . list(located(switch_branch)) option(default_branch) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr RPAREN LBRACE
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE CASE VAL
##
## Ends in an error in state: 138.
##
## switch_branch -> CASE . type_expr IDENT REARROW code_block [ RBRACE ELSE CASE ]
##
## The known suffix of the stack is as follows:
## CASE
##

Invalid syntax

just_stmt: LET IDENT COLON IDENT VAL
##
## Ends in an error in state: 139.
##
## fexpr -> IDENT . [ LPAREN LBRACKET ]
## type_expr -> IDENT . [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT LBRACE
##
## Ends in an error in state: 141.
##
## switch_branch -> CASE type_expr . IDENT REARROW code_block [ RBRACE ELSE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production type_expr -> IDENT
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT VAL
##
## Ends in an error in state: 142.
##
## switch_branch -> CASE type_expr IDENT . REARROW code_block [ RBRACE ELSE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr IDENT
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT REARROW VAL
##
## Ends in an error in state: 143.
##
## switch_branch -> CASE type_expr IDENT REARROW . code_block [ RBRACE ELSE CASE ]
##
## The known suffix of the stack is as follows:
## CASE type_expr IDENT REARROW
##

Invalid syntax

just_stmt: LET IDENT COLON BOOL LBRACKET RBRACKET VAL
##
## Ends in an error in state: 145.
##
## fexpr -> function_call . [ LPAREN LBRACKET ]
## type_expr -> function_call . [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE CASE IDENT IDENT REARROW LBRACE RBRACE VAL
##
## Ends in an error in state: 146.
##
## list(located(switch_branch)) -> switch_branch . list(located(switch_branch)) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## switch_branch
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE ELSE VAL
##
## Ends in an error in state: 149.
##
## default_branch -> ELSE . REARROW code_block [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELSE
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE ELSE REARROW VAL
##
## Ends in an error in state: 150.
##
## default_branch -> ELSE REARROW . code_block [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELSE REARROW
##

Invalid syntax

just_stmt: SWITCH LPAREN BOOL RPAREN LBRACE ELSE REARROW LBRACE RBRACE VAL
##
## Ends in an error in state: 152.
##
## switch -> SWITCH LPAREN expr RPAREN LBRACE list(located(switch_branch)) option(default_branch) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## SWITCH LPAREN expr RPAREN LBRACE list(located(switch_branch)) option(default_branch)
##

Invalid syntax

just_stmt: STRUCT VAL
##
## Ends in an error in state: 155.
##
## expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## non_semicolon_stmt -> STRUCT . IDENT LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Invalid syntax

just_stmt: STRUCT IDENT VAL
##
## Ends in an error in state: 156.
##
## non_semicolon_stmt -> STRUCT IDENT . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET VAL
##
## Ends in an error in state: 157.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> STRUCT IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 158.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 159.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE UNION
##
## Ends in an error in state: 160.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 165.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 166.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACKET RBRACKET LBRACE UNION
##
## Ends in an error in state: 167.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: STRUCT IDENT LBRACE UNION
##
## Ends in an error in state: 172.
##
## non_semicolon_stmt -> STRUCT IDENT LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT LBRACE
##

Invalid syntax

just_stmt: STRUCT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 177.
##
## expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params)
##

Invalid syntax

just_stmt: STRUCT LBRACE UNION
##
## Ends in an error in state: 178.
##
## expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ DOT ]
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE
##

Invalid syntax

just_stmt: STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 182.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ DOT ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
## stmt_expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: STRING VAL
##
## Ends in an error in state: 183.
##
## expr -> STRING . [ DOT ]
## fexpr -> STRING . [ LPAREN LBRACKET ]
## stmt_expr -> STRING . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## STRING
##

Invalid syntax

just_stmt: RETURN VAL
##
## Ends in an error in state: 184.
##
## semicolon_stmt -> RETURN . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN
##

Invalid syntax

just_stmt: RETURN BOOL VAL
##
## Ends in an error in state: 185.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> RETURN expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: LET VAL
##
## Ends in an error in state: 187.
##
## semicolon_stmt -> LET . IDENT option(__anonymous_0) EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET . LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

Invalid syntax

just_stmt: LET LBRACE VAL
##
## Ends in an error in state: 188.
##
## semicolon_stmt -> LET LBRACE . nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET LBRACE . loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE
##

Invalid syntax

just_stmt: LET LBRACE IDENT VAL
##
## Ends in an error in state: 189.
##
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT . COMMA [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT . AS IDENT COMMA [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT . COMMA nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT . AS IDENT COMMA nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT . [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT . AS IDENT [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT . COMMA separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT . AS IDENT COMMA separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: LET LBRACE IDENT COMMA VAL
##
## Ends in an error in state: 190.
##
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT COMMA . [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT COMMA . nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT COMMA . separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Invalid syntax

just_stmt: LET LBRACE IDENT AS VAL
##
## Ends in an error in state: 193.
##
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS . IDENT COMMA [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS . IDENT COMMA nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT AS . IDENT [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT AS . IDENT COMMA separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
##
## The known suffix of the stack is as follows:
## IDENT AS
##

Invalid syntax

just_stmt: LET LBRACE IDENT AS IDENT VAL
##
## Ends in an error in state: 194.
##
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS IDENT . COMMA [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS IDENT . COMMA nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT AS IDENT . [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT AS IDENT . COMMA separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
##
## The known suffix of the stack is as follows:
## IDENT AS IDENT
##

Invalid syntax

just_stmt: LET LBRACE IDENT AS IDENT COMMA VAL
##
## Ends in an error in state: 195.
##
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS IDENT COMMA . [ RBRACE DOUBLEDOT ]
## nonempty_list(terminated(destructuring_field,COMMA)) -> IDENT AS IDENT COMMA . nonempty_list(terminated(destructuring_field,COMMA)) [ RBRACE DOUBLEDOT ]
## separated_nonempty_list(COMMA,destructuring_field) -> IDENT AS IDENT COMMA . separated_nonempty_list(COMMA,destructuring_field) [ RBRACE DOUBLEDOT ]
##
## The known suffix of the stack is as follows:
## IDENT AS IDENT COMMA
##

Invalid syntax

just_stmt: LET LBRACE IDENT COMMA DOUBLEDOT VAL
##
## Ends in an error in state: 201.
##
## semicolon_stmt -> LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) . RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT)
##

Invalid syntax

just_stmt: LET LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 202.
##
## semicolon_stmt -> LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE
##

Invalid syntax

just_stmt: LET LBRACE IDENT COMMA RBRACE EQUALS VAL
##
## Ends in an error in state: 203.
##
## semicolon_stmt -> LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS
##

Invalid syntax

just_stmt: LET LBRACE IDENT COMMA RBRACE EQUALS BOOL VAL
##
## Ends in an error in state: 204.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE nonempty_list(terminated(destructuring_field,COMMA)) option(DOUBLEDOT) RBRACE EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: LET LBRACE DOUBLEDOT VAL
##
## Ends in an error in state: 206.
##
## semicolon_stmt -> LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) . RBRACE EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT)
##

Invalid syntax

just_stmt: LET LBRACE RBRACE VAL
##
## Ends in an error in state: 207.
##
## semicolon_stmt -> LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE
##

Invalid syntax

just_stmt: LET LBRACE RBRACE EQUALS VAL
##
## Ends in an error in state: 208.
##
## semicolon_stmt -> LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS
##

Invalid syntax

just_stmt: LET LBRACE RBRACE EQUALS BOOL VAL
##
## Ends in an error in state: 209.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET LBRACE loption(separated_nonempty_list(COMMA,destructuring_field)) option(DOUBLEDOT) RBRACE EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: LET IDENT VAL
##
## Ends in an error in state: 210.
##
## semicolon_stmt -> LET IDENT . option(__anonymous_0) EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Invalid syntax

just_stmt: LET IDENT LPAREN VAL
##
## Ends in an error in state: 211.
##
## semicolon_stmt -> LET IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
## semicolon_stmt -> LET IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN
##

Invalid syntax

just_stmt: LET IDENT LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 212.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 213.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN EQUALS VAL
##
## Ends in an error in state: 214.
##
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS
##

Invalid syntax

just_stmt: LET IDENT LPAREN IDENT COLON BOOL COMMA RPAREN EQUALS BOOL VAL
##
## Ends in an error in state: 215.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: LET IDENT LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 216.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: LET IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 217.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: LET IDENT LPAREN RPAREN EQUALS VAL
##
## Ends in an error in state: 218.
##
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS
##

Invalid syntax

just_stmt: LET IDENT LPAREN RPAREN EQUALS BOOL VAL
##
## Ends in an error in state: 219.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: LET IDENT COLON VAL
##
## Ends in an error in state: 220.
##
## option(__anonymous_0) -> COLON . type_expr [ EQUALS ]
##
## The known suffix of the stack is as follows:
## COLON
##

Invalid syntax

just_stmt: LET IDENT COLON IDENT LBRACE
##
## Ends in an error in state: 222.
##
## semicolon_stmt -> LET IDENT option(__anonymous_0) . EQUALS expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_0)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production type_expr -> IDENT
## In state 221, spurious reduction of production option(__anonymous_0) -> COLON type_expr
##

Invalid syntax

just_stmt: LET IDENT EQUALS VAL
##
## Ends in an error in state: 223.
##
## semicolon_stmt -> LET IDENT option(__anonymous_0) EQUALS . expr [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_0) EQUALS
##

Invalid syntax

just_stmt: LET IDENT EQUALS BOOL VAL
##
## Ends in an error in state: 224.
##
## expr -> expr . DOT IDENT [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF DOT ]
## semicolon_stmt -> LET IDENT option(__anonymous_0) EQUALS expr . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_0) EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: INTERFACE VAL
##
## Ends in an error in state: 225.
##
## expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
## non_semicolon_stmt -> INTERFACE . IDENT LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

Invalid syntax

just_stmt: INTERFACE LBRACE VAL
##
## Ends in an error in state: 226.
##
## expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ DOT ]
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE
##

Invalid syntax

just_stmt: INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 228.
##
## expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ DOT ]
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN LBRACKET ]
## stmt_expr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

just_stmt: INTERFACE IDENT VAL
##
## Ends in an error in state: 229.
##
## non_semicolon_stmt -> INTERFACE IDENT . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET VAL
##
## Ends in an error in state: 230.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 231.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 232.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE VAL
##
## Ends in an error in state: 233.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 236.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 237.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LBRACE list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACKET RBRACKET LBRACE VAL
##
## Ends in an error in state: 238.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: INTERFACE IDENT LBRACE VAL
##
## Ends in an error in state: 241.
##
## non_semicolon_stmt -> INTERFACE IDENT LBRACE . list(located(function_signature_binding)) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

Invalid syntax

just_stmt: INT VAL
##
## Ends in an error in state: 244.
##
## expr -> INT . [ DOT ]
## fexpr -> INT . [ LPAREN LBRACKET ]
## stmt_expr -> INT . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## INT
##

Invalid syntax

just_stmt: IF VAL
##
## Ends in an error in state: 245.
##
## if_ -> IF . LPAREN expr RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

Invalid syntax

just_stmt: IF LPAREN VAL
##
## Ends in an error in state: 246.
##
## if_ -> IF LPAREN . expr RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

Invalid syntax

just_stmt: IF LPAREN BOOL VAL
##
## Ends in an error in state: 247.
##
## expr -> expr . DOT IDENT [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN DOT ]
## if_ -> IF LPAREN expr . RPAREN code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: IF LPAREN BOOL RPAREN VAL
##
## Ends in an error in state: 248.
##
## if_ -> IF LPAREN expr RPAREN . code_block option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

Invalid syntax

just_stmt: IF LPAREN BOOL RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 249.
##
## if_ -> IF LPAREN expr RPAREN code_block . option(located(else_)) [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN code_block
##

Invalid syntax

just_stmt: IF LPAREN BOOL RPAREN LBRACE RBRACE ELSE VAL
##
## Ends in an error in state: 250.
##
## else_ -> ELSE . if_ [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## else_ -> ELSE . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE
##

Invalid syntax

just_stmt: IDENT VAL
##
## Ends in an error in state: 255.
##
## expr -> IDENT . [ DOT ]
## fexpr -> IDENT . [ LPAREN LBRACKET ]
## stmt_expr -> IDENT . [ SEMICOLON RBRACE EOF ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid syntax

just_stmt: FN VAL
##
## Ends in an error in state: 256.
##
## function_definition(located(ident),some(located(code_block))) -> FN . IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(located(code_block))) -> FN . IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(nothing,option(located(code_block))) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,option(located(code_block))) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(located(code_block))) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

just_stmt: FN LPAREN VAL
##
## Ends in an error in state: 257.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,option(located(code_block))) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 258.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 259.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 260.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL COMMA RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 262.
##
## function_definition(nothing,some(located(code_block))) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(located(code_block)) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 263.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: FN LPAREN RPAREN VAL
##
## Ends in an error in state: 264.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: FN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 265.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ DOT ]
## function_definition(nothing,some(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN LPAREN RPAREN LBRACE RBRACE VAL
##
## Ends in an error in state: 267.
##
## function_definition(nothing,some(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block . [ SEMICOLON RBRACE EOF ]
## option(located(code_block)) -> code_block . [ DOT ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block
##

Invalid syntax

just_stmt: FN IDENT VAL
##
## Ends in an error in state: 268.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(located(code_block))) -> FN IDENT . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

Invalid syntax

just_stmt: FN IDENT LPAREN VAL
##
## Ends in an error in state: 269.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN
##

Invalid syntax

just_stmt: FN IDENT LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 270.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 271.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 272.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN IDENT LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 274.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 275.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 276.
##
## function_definition(located(ident),some(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN IDENT LBRACKET VAL
##
## Ends in an error in state: 278.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 279.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 280.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN VAL
##
## Ends in an error in state: 281.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 282.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 283.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 284.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 286.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN RPAREN VAL
##
## Ends in an error in state: 287.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 288.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 290.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 291.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN VAL
##
## Ends in an error in state: 292.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 293.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 294.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 295.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 297.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN RPAREN VAL
##
## Ends in an error in state: 298.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: FN IDENT LBRACKET RBRACKET LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 299.
##
## function_definition(located_ident_with_params,some(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . code_block [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM VAL
##
## Ends in an error in state: 301.
##
## expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ DOT ]
## expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ DOT ]
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM . IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## stmt_expr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Invalid syntax

just_stmt: ENUM LBRACE VAL
##
## Ends in an error in state: 302.
##
## expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ DOT ]
## expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ DOT ]
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ SEMICOLON RBRACE EOF ]
## stmt_expr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 304.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ DOT ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 305.
##
## expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
## stmt_expr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 307.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ DOT ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
## stmt_expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 308.
##
## expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ DOT ]
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
## stmt_expr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: ENUM IDENT VAL
##
## Ends in an error in state: 309.
##
## non_semicolon_stmt -> ENUM IDENT . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET VAL
##
## Ends in an error in state: 310.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 311.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 312.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE VAL
##
## Ends in an error in state: 313.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 315.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 318.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 320.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 321.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET RBRACKET LBRACE VAL
##
## Ends in an error in state: 322.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET RBRACKET LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 324.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM IDENT LBRACKET RBRACKET LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 327.
##
## non_semicolon_stmt -> ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM IDENT LBRACE VAL
##
## Ends in an error in state: 329.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> ENUM IDENT LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE
##

Invalid syntax

just_stmt: ENUM IDENT LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 331.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: ENUM IDENT LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 334.
##
## non_semicolon_stmt -> ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: BOOL VAL
##
## Ends in an error in state: 336.
##
## expr -> BOOL . [ DOT ]
## fexpr -> BOOL . [ LPAREN LBRACKET ]
## stmt_expr -> BOOL . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## BOOL
##

Invalid syntax

just_stmt: IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 338.
##
## expr -> struct_constructor . [ DOT ]
## stmt_expr -> struct_constructor . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## struct_constructor
##

Invalid syntax

program: BOOL SEMICOLON VAL
##
## Ends in an error in state: 342.
##
## block_stmt -> semicolon_stmt SEMICOLON . block_stmt [ RBRACE EOF ]
## block_stmt -> semicolon_stmt SEMICOLON . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## semicolon_stmt SEMICOLON
##

Invalid syntax

program: LBRACE RBRACE VAL
##
## Ends in an error in state: 343.
##
## block_stmt -> non_semicolon_stmt . block_stmt [ RBRACE EOF ]
## stmt -> non_semicolon_stmt . [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## non_semicolon_stmt
##

Invalid syntax

just_stmt: BOOL LBRACKET RBRACKET VAL
##
## Ends in an error in state: 348.
##
## expr -> function_call . [ DOT ]
## fexpr -> function_call . [ LPAREN LBRACKET ]
## stmt_expr -> function_call . [ SEMICOLON RBRACE EOF ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## function_call
##

Invalid syntax

just_stmt: BOOL DOT VAL
##
## Ends in an error in state: 350.
##
## expr -> expr DOT . IDENT [ DOT ]
## expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT . IDENT [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Invalid syntax

just_stmt: BOOL DOT IDENT VAL
##
## Ends in an error in state: 351.
##
## expr -> expr DOT IDENT . [ DOT ]
## expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT . [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT
##

Invalid syntax

just_stmt: BOOL DOT IDENT LPAREN VAL
##
## Ends in an error in state: 352.
##
## expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ DOT ]
## expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN . nonempty_list(terminated(located(expr),COMMA)) RPAREN [ SEMICOLON RBRACE EOF ]
## stmt_expr -> expr DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN
##

Invalid syntax

just_stmt: BOOL DOT IDENT LPAREN BOOL COMMA RBRACKET
##
## Ends in an error in state: 353.
##
## expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) . RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) . RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production nonempty_list(terminated(located(expr),COMMA)) -> expr COMMA
##

Invalid syntax

just_stmt: BOOL DOT IDENT LPAREN BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 354.
##
## expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN
##

Invalid syntax

just_stmt: BOOL DOT IDENT LPAREN BOOL RBRACKET
##
## Ends in an error in state: 355.
##
## expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) . RPAREN [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) . RPAREN [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 110, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 105, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Invalid syntax

just_stmt: BOOL DOT IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 356.
##
## expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ DOT ]
## stmt_expr -> expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## expr DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN
##

Invalid syntax

just_stmt: LBRACE BOOL EOF
##
## Ends in an error in state: 360.
##
## code_block -> LBRACE block_stmt . RBRACE [ VAL UNION TILDE SWITCH STRUCT STRING SEMICOLON RPAREN RETURN RBRACKET RBRACE LPAREN LET LBRACE INTERFACE INT IMPL IF IDENT FN EOF ENUM ELSE DOT COMMA CASE BOOL ]
##
## The known suffix of the stack is as follows:
## LBRACE block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 336, spurious reduction of production stmt_expr -> BOOL
## In state 339, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 341, spurious reduction of production stmt -> semicolon_stmt
## In state 340, spurious reduction of production block_stmt -> stmt
##

Invalid syntax

just_stmt: RETURN FN LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 363.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: RETURN FN LPAREN RPAREN UNION
##
## Ends in an error in state: 364.
##
## function_definition(nothing,option(located(code_block))) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT EQUALS BOOL VAL
##
## Ends in an error in state: 366.
##
## expr -> expr . DOT IDENT [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE FN DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE FN DOT COMMA ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr . COMMA nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr . COMMA separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT EQUALS BOOL COMMA VAL
##
## Ends in an error in state: 367.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT EQUALS expr COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT EQUALS expr COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE IDENT COMMA VAL
##
## Ends in an error in state: 370.
##
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . [ RBRACE FN ]
## nonempty_list(terminated(enum_member,COMMA)) -> IDENT COMMA . nonempty_list(terminated(enum_member,COMMA)) [ RBRACE FN ]
## separated_nonempty_list(COMMA,enum_member) -> IDENT COMMA . separated_nonempty_list(COMMA,enum_member) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Invalid syntax

just_stmt: LET IDENT COLON ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 374.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: LET IDENT COLON ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 377.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: FN LPAREN RPAREN RARROW BOOL UNION
##
## Ends in an error in state: 380.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## function_call -> fexpr . LBRACKET nonempty_list(terminated(located(expr),COMMA)) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## function_call -> fexpr . LBRACKET loption(separated_nonempty_list(COMMA,located(expr))) RBRACKET [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
## option(preceded(RARROW,located(fexpr))) -> RARROW fexpr . [ VAL SEMICOLON RPAREN RBRACKET RBRACE LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## RARROW fexpr
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 382.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: INTERFACE LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 383.
##
## function_definition(located(ident),nothing) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RBRACE FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: LPAREN FN VAL
##
## Ends in an error in state: 387.
##
## function_definition(nothing,nothing) -> FN . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN
##

Invalid syntax

just_stmt: LPAREN FN LPAREN VAL
##
## Ends in an error in state: 388.
##
## function_definition(nothing,nothing) -> FN LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
## function_definition(nothing,nothing) -> FN LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN
##

Invalid syntax

just_stmt: LPAREN FN LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 389.
##
## function_definition(nothing,nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: LPAREN FN LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 390.
##
## function_definition(nothing,nothing) -> FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: LPAREN FN LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 392.
##
## function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: LPAREN FN LPAREN RPAREN VAL
##
## Ends in an error in state: 393.
##
## function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: LPAREN IDENT LBRACE RBRACE VAL
##
## Ends in an error in state: 395.
##
## fexpr -> LPAREN struct_constructor . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN struct_constructor
##

Invalid syntax

just_stmt: LPAREN FN LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 397.
##
## fexpr -> LPAREN function_definition(nothing,nothing) . RPAREN [ VAL SEMICOLON RPAREN RBRACKET RBRACE LPAREN LBRACKET LBRACE IMPL FN EOF DOT COMMA CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_definition(nothing,nothing)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
## In state 394, spurious reduction of production function_definition(nothing,nothing) -> FN LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##

Invalid syntax

just_stmt: UNION LBRACE IMPL BOOL VAL
##
## Ends in an error in state: 399.
##
## function_call -> fexpr . LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ LPAREN LBRACKET LBRACE ]
## function_call -> fexpr . LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ LPAREN LBRACKET LBRACE ]
## function_call -> fexpr . LBRACKET nonempty_list(terminated(located(expr),COMMA)) RBRACKET [ LPAREN LBRACKET LBRACE ]
## function_call -> fexpr . LBRACKET loption(separated_nonempty_list(COMMA,located(expr))) RBRACKET [ LPAREN LBRACKET LBRACE ]
## list(impl) -> IMPL fexpr . LBRACE list(sugared_function_definition(option(located(code_block)))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr
##

Invalid syntax

just_stmt: UNION LBRACE IMPL BOOL LBRACE VAL
##
## Ends in an error in state: 400.
##
## list(impl) -> IMPL fexpr LBRACE . list(sugared_function_definition(option(located(code_block)))) RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE
##

Invalid syntax

just_stmt: UNION LBRACE IMPL BOOL LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 401.
##
## list(impl) -> IMPL fexpr LBRACE list(sugared_function_definition(option(located(code_block)))) . RBRACE list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: UNION LBRACE IMPL BOOL LBRACE RBRACE VAL
##
## Ends in an error in state: 402.
##
## list(impl) -> IMPL fexpr LBRACE list(sugared_function_definition(option(located(code_block)))) RBRACE . list(impl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IMPL fexpr LBRACE list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: LPAREN UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 405.
##
## fexpr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
## type_expr -> LPAREN UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: LPAREN TILDE VAL
##
## Ends in an error in state: 407.
##
## fexpr -> TILDE . IDENT [ LPAREN LBRACKET ]
## type_expr -> LPAREN TILDE . IDENT RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE
##

Invalid syntax

just_stmt: LPAREN TILDE IDENT VAL
##
## Ends in an error in state: 408.
##
## fexpr -> TILDE IDENT . [ LPAREN LBRACKET ]
## type_expr -> LPAREN TILDE IDENT . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN TILDE IDENT
##

Invalid syntax

just_stmt: LPAREN STRUCT VAL
##
## Ends in an error in state: 410.
##
## fexpr -> STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN STRUCT . option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

Invalid syntax

just_stmt: LPAREN STRUCT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 411.
##
## fexpr -> STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN STRUCT option(params) . LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params)
##

Invalid syntax

just_stmt: LPAREN STRUCT LBRACE UNION
##
## Ends in an error in state: 412.
##
## fexpr -> STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN STRUCT option(params) LBRACE . list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE
##

Invalid syntax

just_stmt: LPAREN STRUCT LBRACE RBRACE VAL
##
## Ends in an error in state: 416.
##
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
## type_expr -> LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: LPAREN STRING VAL
##
## Ends in an error in state: 418.
##
## fexpr -> STRING . [ LPAREN LBRACKET ]
## type_expr -> LPAREN STRING . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN STRING
##

Invalid syntax

just_stmt: LPAREN INTERFACE VAL
##
## Ends in an error in state: 420.
##
## fexpr -> INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN INTERFACE . LBRACE list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE
##

Invalid syntax

just_stmt: LPAREN INTERFACE LBRACE VAL
##
## Ends in an error in state: 421.
##
## fexpr -> INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN INTERFACE LBRACE . list(located(function_signature_binding)) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE
##

Invalid syntax

just_stmt: LPAREN INTERFACE LBRACE RBRACE VAL
##
## Ends in an error in state: 423.
##
## fexpr -> INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . [ LPAREN LBRACKET ]
## type_expr -> LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN INTERFACE LBRACE list(located(function_signature_binding)) RBRACE
##

Invalid syntax

just_stmt: LPAREN INT VAL
##
## Ends in an error in state: 425.
##
## fexpr -> INT . [ LPAREN LBRACKET ]
## type_expr -> LPAREN INT . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN INT
##

Invalid syntax

just_stmt: LPAREN IDENT VAL
##
## Ends in an error in state: 427.
##
## fexpr -> IDENT . [ LPAREN LBRACKET ]
## type_expr -> LPAREN IDENT . RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> IDENT . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN IDENT
##

Invalid syntax

just_stmt: LPAREN ENUM VAL
##
## Ends in an error in state: 429.
##
## fexpr -> ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM . LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN ENUM . LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM
##

Invalid syntax

just_stmt: LPAREN ENUM LBRACE VAL
##
## Ends in an error in state: 430.
##
## fexpr -> ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## fexpr -> ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM LBRACE . nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> LPAREN ENUM LBRACE . loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE
##

Invalid syntax

just_stmt: LPAREN ENUM LBRACE IDENT COMMA FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 432.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) . RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: LPAREN ENUM LBRACE IDENT COMMA RBRACE VAL
##
## Ends in an error in state: 433.
##
## fexpr -> ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE nonempty_list(terminated(enum_member,COMMA)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: LPAREN ENUM LBRACE FN IDENT LPAREN RPAREN IMPL
##
## Ends in an error in state: 436.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) . RBRACE RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block))))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 460, spurious reduction of production option(preceded(RARROW,located(fexpr))) ->
## In state 461, spurious reduction of production option(located(code_block)) ->
## In state 462, spurious reduction of production function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block))
## In state 41, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) ->
## In state 42, spurious reduction of production list(sugared_function_definition(option(located(code_block)))) -> function_definition(located(ident),option(located(code_block))) list(sugared_function_definition(option(located(code_block))))
##

Invalid syntax

just_stmt: LPAREN ENUM LBRACE RBRACE VAL
##
## Ends in an error in state: 437.
##
## fexpr -> ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . [ LPAREN LBRACKET ]
## type_expr -> LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN ENUM LBRACE loption(separated_nonempty_list(COMMA,enum_member)) list(sugared_function_definition(option(located(code_block)))) RBRACE
##

Invalid syntax

just_stmt: LPAREN BOOL VAL
##
## Ends in an error in state: 439.
##
## fexpr -> BOOL . [ LPAREN LBRACKET ]
## type_expr -> LPAREN BOOL . RPAREN [ LBRACE IDENT EQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN BOOL
##

Invalid syntax

just_stmt: LPAREN BOOL LBRACKET RBRACKET VAL
##
## Ends in an error in state: 441.
##
## fexpr -> function_call . [ LPAREN LBRACKET ]
## type_expr -> LPAREN function_call . RPAREN [ LBRACE IDENT EQUALS ]
## type_expr -> function_call . [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN function_call
##

Invalid syntax

just_stmt: STRUCT LBRACE VAL IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 443.
##
## expr -> expr . DOT IDENT [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ VAL SEMICOLON RBRACE IMPL FN DOT ]
## list(struct_field) -> VAL IDENT COLON expr . option(SEMICOLON) list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: STRUCT LBRACE VAL IDENT COLON BOOL SEMICOLON UNION
##
## Ends in an error in state: 445.
##
## list(struct_field) -> VAL IDENT COLON expr option(SEMICOLON) . list(struct_field) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## VAL IDENT COLON expr option(SEMICOLON)
##

Invalid syntax

just_stmt: RETURN STRUCT LBRACE RBRACE UNION
##
## Ends in an error in state: 450.
##
## expr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## STRUCT option(params) LBRACE list(struct_field) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL VAL
##
## Ends in an error in state: 451.
##
## expr -> expr . DOT IDENT [ RPAREN RBRACKET DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RPAREN RBRACKET DOT COMMA ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RPAREN RBRACKET DOT COMMA ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA [ RPAREN RBRACKET ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr . COMMA nonempty_list(terminated(function_param,COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr . COMMA separated_nonempty_list(COMMA,function_param) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: FN LPAREN IDENT COLON BOOL COMMA VAL
##
## Ends in an error in state: 452.
##
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . [ RPAREN RBRACKET ]
## nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA . nonempty_list(terminated(function_param,COMMA)) [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr COMMA . separated_nonempty_list(COMMA,function_param) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 455.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 456.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 457.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 459.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN RPAREN VAL
##
## Ends in an error in state: 460.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 461.
##
## function_definition(located(ident),option(located(code_block))) -> FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET VAL
##
## Ends in an error in state: 463.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 464.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 465.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN VAL
##
## Ends in an error in state: 466.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 467.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 468.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 469.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 471.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN RPAREN VAL
##
## Ends in an error in state: 472.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 473.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 475.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 476.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN VAL
##
## Ends in an error in state: 477.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN . nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN . loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RBRACKET
##
## Ends in an error in state: 478.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN VAL
##
## Ends in an error in state: 479.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL COMMA RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 480.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN nonempty_list(terminated(function_param,COMMA)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN IDENT COLON BOOL RBRACKET
##
## Ends in an error in state: 482.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) . RPAREN option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN RPAREN VAL
##
## Ends in an error in state: 483.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN . option(preceded(RARROW,located(fexpr))) option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN
##

Invalid syntax

just_stmt: ENUM LBRACE FN IDENT LBRACKET RBRACKET LPAREN RPAREN RARROW BOOL VAL
##
## Ends in an error in state: 484.
##
## function_definition(located_ident_with_params,option(located(code_block))) -> FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr))) . option(located(code_block)) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## FN IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LPAREN loption(separated_nonempty_list(COMMA,function_param)) RPAREN option(preceded(RARROW,located(fexpr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 380, spurious reduction of production option(preceded(RARROW,located(fexpr))) -> RARROW fexpr
##

Invalid syntax

just_stmt: RETURN UNION LBRACE RBRACE UNION
##
## Ends in an error in state: 488.
##
## expr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ VAL SEMICOLON RPAREN RBRACKET RBRACE IMPL FN EOF DOT COMMA CASE ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: UNION LBRACE CASE BOOL VAL
##
## Ends in an error in state: 489.
##
## expr -> expr . DOT IDENT [ RBRACE IMPL FN DOT CASE ]
## expr -> expr . DOT IDENT LPAREN nonempty_list(terminated(located(expr),COMMA)) RPAREN [ RBRACE IMPL FN DOT CASE ]
## expr -> expr . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ RBRACE IMPL FN DOT CASE ]
## list(preceded(CASE,located(expr))) -> CASE expr . list(preceded(CASE,located(expr))) [ RBRACE IMPL FN ]
##
## The known suffix of the stack is as follows:
## CASE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
##

Invalid syntax

just_stmt: UNION LBRACE RBRACE VAL
##
## Ends in an error in state: 494.
##
## expr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ DOT ]
## fexpr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ LPAREN LBRACKET ]
## stmt_expr -> UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE . [ SEMICOLON RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## UNION LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE
##

Invalid syntax

just_stmt: UNION IDENT VAL
##
## Ends in an error in state: 495.
##
## non_semicolon_stmt -> UNION IDENT . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT . LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT . LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET VAL
##
## Ends in an error in state: 496.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET . nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
## non_semicolon_stmt -> UNION IDENT LBRACKET . loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET IDENT COLON BOOL COMMA RPAREN
##
## Ends in an error in state: 497.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) . RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 452, spurious reduction of production nonempty_list(terminated(function_param,COMMA)) -> IDENT COLON expr COMMA
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET VAL
##
## Ends in an error in state: 498.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET IDENT COLON BOOL COMMA RBRACKET LBRACE VAL
##
## Ends in an error in state: 499.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET nonempty_list(terminated(function_param,COMMA)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET IDENT COLON BOOL RPAREN
##
## Ends in an error in state: 504.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) . RBRACKET LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production expr -> BOOL
## In state 451, spurious reduction of production separated_nonempty_list(COMMA,function_param) -> IDENT COLON expr
## In state 16, spurious reduction of production loption(separated_nonempty_list(COMMA,function_param)) -> separated_nonempty_list(COMMA,function_param)
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET RBRACKET VAL
##
## Ends in an error in state: 505.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET . LBRACE list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET
##

Invalid syntax

just_stmt: UNION IDENT LBRACKET RBRACKET LBRACE VAL
##
## Ends in an error in state: 506.
##
## non_semicolon_stmt -> UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACKET loption(separated_nonempty_list(COMMA,function_param)) RBRACKET LBRACE
##

Invalid syntax

just_stmt: UNION IDENT LBRACE VAL
##
## Ends in an error in state: 511.
##
## non_semicolon_stmt -> UNION IDENT LBRACE . list(preceded(CASE,located(expr))) list(sugared_function_definition(option(located(code_block)))) list(impl) RBRACE [ UNION TILDE SWITCH STRUCT STRING RETURN RBRACE LPAREN LET LBRACE INTERFACE INT IF IDENT FN EOF ENUM BOOL ]
##
## The known suffix of the stack is as follows:
## UNION IDENT LBRACE
##

Invalid syntax

just_stmt: BOOL SEMICOLON
##
## Ends in an error in state: 516.
##
## just_stmt -> stmt . EOF [ # ]
##
## The known suffix of the stack is as follows:
## stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 336, spurious reduction of production stmt_expr -> BOOL
## In state 339, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 518, spurious reduction of production stmt -> semicolon_stmt
##

Invalid syntax

program: VAL
##
## Ends in an error in state: 521.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid syntax

program: BOOL RBRACE
##
## Ends in an error in state: 524.
##
## program -> block_stmt . EOF [ # ]
##
## The known suffix of the stack is as follows:
## block_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 336, spurious reduction of production stmt_expr -> BOOL
## In state 339, spurious reduction of production semicolon_stmt -> stmt_expr
## In state 341, spurious reduction of production stmt -> semicolon_stmt
## In state 340, spurious reduction of production block_stmt -> stmt
##

Invalid syntax

